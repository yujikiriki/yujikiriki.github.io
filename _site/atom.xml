<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
  <title>Bitácora</title>
  <link href="http://coyled.com/"/>
  <link type="application/atom+xml" rel="self" href="http://coyled.com/atom.xml"/>
  <updated>2015-08-30T17:33:23-05:00</updated>
  <id>http://yujikiriki.com/</id>
  <author>
    <name>Yuji Kiriki</name>
    <email>yujikiriki@gmail.com</email>
  </author>

  
  <entry>
    <id>http://b.yujikiriki.com/2015/09/01/Título escandaloso_sobre los_desarrolladores_colombianos</id>
    <link type="text/html" rel="alternate" href="http://b.yujikiriki.com/2015/09/01/T%C3%ADtulo%20escandaloso_sobre%20los_desarrolladores_colombianos.html"/>
    <title>Título escandaloso sobre los desarrolladores colombianos*</title>
    <updated>2015-09-01T00:00:00-05:00</updated>
    <author>
      <name>Yuji Kiriki</name>
      <uri>http://yujikiriki.com/</uri>
    </author>
    <content type="html">&lt;h2 id=&quot;introduccin&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;¿Hay escasez de desarrolladores talentosos en Colombia? Obviamente sí. Es un fenómeno mundial. Por infinidad de razones, y todas están “explicadas” a un &lt;em&gt;google query&lt;/em&gt; de distancia.&lt;/p&gt;

&lt;p&gt;Lo que me motivó a escribir fueron &lt;a href=&quot;http://bunnyinc.com/blog/colombia-doesnt-software-engineers-really-not-even-one&quot;&gt;dos&lt;/a&gt; &lt;a href=&quot;http://bunnyinc.com/blog/?tag=colombia&quot;&gt;blogs&lt;/a&gt; que publicó Alex Torrenegra y la &lt;a href=&quot;https://medium.com/colombia-dev/colombia-doesnt-have-an-engineering-deficit-really-it-doesnt-af60d1cac85c&quot;&gt;respuesta&lt;/a&gt; de Juan Pablo Buriticá.&lt;/p&gt;

&lt;p&gt;Me había negado ha escribir sobre eso, tratando de tapar el sol con mis manos. Cuando lo leí sentí que lo único que buscaban era antención gracias a la controversia: títulos rimbombantes y llamativos, rayando en lo escandaloso. Cifras sacadas debajo de la manga. Al leer sentía como cuando un presidente colombiano demuestra gestión después de haberle metido la mano a los artefactos de medición del DANE.&lt;/p&gt;

&lt;p&gt;Luego de un tiempo me dí cuenta que lo que ellos habían escrito sí había hecho un cambio: trajo consigo rumores, chismes y conversaciones de corredor.&lt;/p&gt;

&lt;p&gt;Esta entrada pretende seguir fomentando el chisme, aumentar la cantidad de rumores y conversaciones que podemos tener al calor de un tinto sin que sirva para una posible solución al “problema” de escasez de desarrolladores y sus &lt;em&gt;culpables&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Para poder hacerlo, trataré de seguir la misma línea de los icónicos artículos y así, no rayar el parche.&lt;/p&gt;

&lt;h2 id=&quot;tengo-que-demostrar-experiencia-conociendo-desarrolladores-y-la-industria&quot;&gt;Tengo que demostrar experiencia conociendo desarrolladores y la industria&lt;/h2&gt;
&lt;p&gt;Obviamente, si no ¿cómo justifico que tengo &lt;em&gt;autoridad&lt;/em&gt; para hablar sobre este tema y así poderlos envolver en mi &lt;a href=&quot;https://es.wikipedia.org/wiki/Argumento_ad_verecundiam&quot;&gt;&lt;em&gt;Argumentum Ad Verecundiam&lt;/em&gt;&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Hace 8 años recluto* desarrolladores de software para una PyME. A la fecha hemos contratado más de 100 desarrolladores. Muchos de ellos aún hacen parte de la empresa. Muchos otros se han ido a otras empresas, han cambiado de profesión, han iniciado su emprendimiento o se han ido a estudiar al exterior.&lt;/p&gt;

&lt;p&gt;Todos los vinculados han pasado por nuestro proceso de reclutamiento: 1) Evaluación de hoja de vida por psicología. 2) Entrevista con psicología. 3) Prueba técnica teórica escrita. 4) Prueba de código para la casa. 5) Entrevista con algún líder de equipo de la empresa.&lt;/p&gt;

&lt;p&gt;La entrevista tiene como objetivo sentarse una hora con el candidato a darle retroalimentación sobre la prueba escrita y hacer un &lt;em&gt;code review&lt;/em&gt; sobre la prueba de código. Explicarle qué consideramos que está bien, qué errores cometió, qué oportunidades de mejora tiene, qué libros debería leer, etc. Tratamos, como sea, de que salga de la sesión motivado a aprender más.&lt;/p&gt;

&lt;p&gt;Hoy en día, el equipo de psicología verifica entre 400 y 500 hojas de vida al mes, de las cuales en promedio se realizan 147 entrevistas y se hacen 57 pruebas escritas y de código. Eso quiere decir que a la fecha me he sentado a charlar por una hora con cerca de 1000 desarrolladores durante estos últimos 8 años (esta cifra es aproximada, pues los primeros años no eramos tan expeditos como hoy).&lt;/p&gt;

&lt;p&gt;Obviamente esa cifra trata de ser escandalosa para que se convenzan de que tengo &lt;em&gt;autoridad&lt;/em&gt; para hablar sobre el estado de los desarrolladores en Colombia y sigan leyendo.&lt;/p&gt;

&lt;p&gt;Durante la existencia de esta PyME, hemos entregado más de 100 productos de software para distintas industrias y el gobierno colombiano. La duración promedio de un proyecto es de 6 meses con equipos de entre 3 a 15 desarrolladores. Para que se hagan una idea, hagan de cuenta que hemos construido, mantenido y evolucionado unos 100 productos del tamaño de una &lt;em&gt;startup&lt;/em&gt; “medianita” (sea lo que sea que eso signifique).&lt;/p&gt;

&lt;p&gt;Esta PyME fue construída de la nada. Sin capital de algún inversionista. Inscribimos la empresa en &lt;a href=&quot;http://www.ccb.org.co/&quot;&gt;CCB&lt;/a&gt; con COP$ 350k (cada socio invirtió COP$50k). A punta de respirar profundo, hoy en día operamos desde Bogotá y Medellín construyendo y entregando productos de software en Latinoamérica. Para resumir: empresa colombiana con talento colombiano (y panas venezolanos) haciendo software colombiano para el mundo. Con esto quiero convencerlos de que conozco un poco la industria (&lt;em&gt;argumentum ad verecundiam&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Para poder entender el “problema”, debemos empezar a encontrar culpables. Bueno, eso ha sido al menos el ejercicio que han hecho los demás.&lt;/p&gt;

&lt;h2 id=&quot;hay-que-culpar-a-la-academia&quot;&gt;Hay que culpar a la academia&lt;/h2&gt;
&lt;p&gt;El señor Torrenegra culpa a las universidades por no estar produciendo desarrolladores de software calificados o expertos.&lt;/p&gt;

&lt;p&gt;Él ejemplifica que&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;” A lucky Colombian systems engineer gets to study around 70% of the classes that a software engineer gets to study. The other 30% is packed with finance, business, and management. And this is bad”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No veo cómo eso es un problema para los desarrolladores de software.&lt;/p&gt;

&lt;p&gt;¿No es acaso una de las habilidades más codiciadas en un desarrollador, su capacidad de entender dominios de negocio? Si no tiene fundamentos mínimos de economía, administración, contabilidad, etc, ¿cómo pretende un desarrollador entender y entablar una conversación con un experto de negocio/inversionista/cualquier ser humano no técnico para así saber qué solución de tecnología se le puede construir?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Their ultimate professional goal is to manage other people.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esta pregunta va para los más viejitos: ¿no es acaso el reto más grande en un equipo de software lograr crear un ambiente y condiciones propicias para escribir buen código? ¿No son los libros de psicología y comportamiento humano los libros que uno lee con esmero para tratar de entender la condición humana y al individuo para, de alguna manera, poder formar los mejores equipos que en consecuencia construyan un buen producto de software?&lt;/p&gt;

&lt;p&gt;En este punto me dí cuenta que muy seguramente el señor Torrenegra construye software de una manera muy particular pues, si no necesita desarolladores “generalistas” ¿cómo logra que ellos entiendan lo que hay que hacer y cómo ellos pueden aportar a la solución de un reto? ¿Será acaso que él los ve como pega-ladrillos (no peyorativo) que le deben obedecer?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“As we say in Colombia, “tenemos mucho cacique y poco indio,” meaning “we have many chiefs and few Indians.””&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Coincido, pero eso ¿es culpa de la universidad? Acá prefiero esconderme detrás de otra célebre frase:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“En Colombia, &lt;em&gt;doctor&lt;/em&gt; se le dice a cualquier hijueputa”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Empresas-empresarios-historia-Colombia-Siglos/dp/B0038ASH2C/ref=sr_1_6?s=books&amp;amp;ie=UTF8&amp;amp;qid=1440880638&amp;amp;sr=1-6&amp;amp;pebp=1440880649218&amp;amp;perid=1790YCDW2G08FVQF5T47&quot;&gt;Históricamente&lt;/a&gt; en Colombia, el ascenso social se ha logrado a través de la prosperidad económica, bien sea a través de negocios lícitos o ilícitos, estudio, o unión de capitales familiares a través de matrimonios.&lt;/p&gt;

&lt;p&gt;Con base en ese hecho, no es justo culpar completamente a la formación impartida por la universidad. Hace parte de nuestra idiosincrasia, una relación directamente proporcional entre ingresos y número de personas subalternas, haciendo que ser “doctor” sea preciado.&lt;/p&gt;

&lt;p&gt;Es fácil culpar a la academia. Pero una vez una profesora de la Universidad de lo Andes me preguntó en un panel: ¿qué están haciendo las empresas para convencer a los jóvenes bachilleres de que estudien ingenieria de sistemas y computación?. Me quedé mudo porque no supe responder.&lt;/p&gt;

&lt;p&gt;Por otro lado, no estoy de acuerdo en que una formación generalista impida la formación de buenos desarrolladores. Finalmente, como en cualquier carrera universitaria, la persona y su vida laboral es quien termina definiendo qué hacemos y cómo lo hacemos.&lt;/p&gt;

&lt;p&gt;Si la universidad nos deja con las bases en &lt;em&gt;hard&lt;/em&gt; y &lt;em&gt;soft skills&lt;/em&gt; se puede construir lo que sea, siendo los &lt;em&gt;soft skills&lt;/em&gt; más valiosos: disciplina, auto-apredizaje, resiliencia, tolerancia a la frustración, comunicación escrita y verbal, etc. Adicionalmente si la universidad fomenta los &lt;em&gt;hard skills&lt;/em&gt; como el racionamiento lógico, a través del ciclo básico, quienes estamos desaprovechando el potencial somos las empresas.&lt;/p&gt;

&lt;p&gt;Ahí entra el artículo del señor Buriticá.&lt;/p&gt;

&lt;h2 id=&quot;hay-que-culpar-a-las-empresas&quot;&gt;Hay que culpar a las empresas&lt;/h2&gt;
&lt;p&gt;El señor Buriticá explica que no hay escasez de desarrolladores. Según él, el problema es que las empresas de la industria de software en Colombia son malas. O con el eufemismo: “Necesitamos mejores empresas”.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“En Colombia tenemos una industria de software que no está lista para contratar personas que están experimentando con Go o Rust”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Si el señor Buriticá puede argumentar que su equipo es una demostración de que no hay déficit de desarrolladores de software, creo yo, que puedo poner a nuestra PyME como contraejemplo de sus aseveraciones pues, desde hace más de dos años, no hemos escatimado esfuerzos en fomentar el uso de diferentes tecnologías en Colombia: &lt;a href=&quot;https://www.typesafe.com/partners/systemintegrator-partners&quot;&gt;Scala, Akka, Play, Apache Spark&lt;/a&gt;, &lt;a href=&quot;http://www.datastax.com/partners&quot;&gt;Apache Cassandra&lt;/a&gt;, Apache Kafka, JS, Docker, chef-solo y muchas más ya hacen parte del ecosistema de las más tradicionales empresas del país. Y no sólo eso. Fomentar &lt;a href=&quot;http://www.meetup.com/ScalaMDE/&quot;&gt;comunidad&lt;/a&gt; y entrenar a nuestros desarrolladores hace parte de la demostración de contraejemplo.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Esta industria definitivamente tiene un déficit y es un problema que ella misma se ha creado. No son un sector atractivo para trabajar, incluso tras haber aumentado los salarios gracias a una afluencia de consultorías extranjeras y empresas near-shoring.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Las condiciones del mercado han permitido que nos volvamos mercenarios. Y eso es bueno. Habla muy bien de qué tan talentosos y valiosos nos hemos vuelto los colombianos. Por otro lado, confirma la escasez.&lt;/p&gt;

&lt;p&gt;Llegan &lt;em&gt;startups&lt;/em&gt; extranjeras o llegan empresas extranjeras con sus grandes billeteras (sumándole la escalada del dolar) a “comprar” talento colombiano. Y eso también es bueno.&lt;/p&gt;

&lt;p&gt;Con una billetera suficientemente grande es posible salir de compras y &lt;strong&gt;especular&lt;/strong&gt; sobre cuánto debería o no debería ser el salario de un desarrollador colombiano. Así el salario mínimo en Colombia para 2015 sea de COP$644.350. Y obvio, acá en Colombia, cualquier persona de cualquier industria por un salario de un orden de magnitud más grande que el mínimo, hasta trabaja en una &lt;em&gt;startup&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Lo que demuestra hasta acá el artículo del señor Buriticá es que con la distorción que una billetera llena de dolares puede causar, no se percibe que sí hay escasez de desarrolladores. Y es entendible pues, las restricciones sobre las que su empresa trabaja son muy diferentes a las nuestras como PyME.&lt;/p&gt;

&lt;p&gt;Al estar él basándose en el hecho de haber formado un equipo a punta de salario y beneficios con capital extranjero, se ha puesto automáticamente por fuera de las condiciones que tenemos en la industria colombiana de software y, desde la barrera, cuestiona a los que estamos lidiando con el toro y dejando la piel en la cancha.&lt;/p&gt;

&lt;p&gt;Lo mismo ocurre con muchas otras &lt;em&gt;startups&lt;/em&gt; y muchas otras empresas argentinas, uruguayas, españolas, indias, chilenas y mexicanas de las cuales me mantengo al día dado que son mi competencia más feroz como PyME que somos.&lt;/p&gt;

&lt;p&gt;Bajo ninguna circunstancia estoy en desacuerdo con que los desarrolladores deban ganar más. Soy el primero que lo &lt;a href=&quot;https://sis-temas.uniandes.edu.co/un-desarrollador-de-20-millones-mensuales/&quot;&gt;cree&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;La distorción en salarios hace que se inflen los precios de los proyectos de software debido a que los desarrolladores ganan más. Luego, estos precios son asumidos por nuestros clientes que, al ver las cifras y compararlas con otros oferentes internacionales, les parecerán ridículo. Ahí es cuando uno como PyME deja de vender y, si deja de vender, deja de pagar salarios, sin importar su cuantía.&lt;/p&gt;

&lt;p&gt;Recuerden que las fábricas de software son invento &lt;a href=&quot;http://dspace.mit.edu/bitstream/handle/1721.1/2345/swp-3268-23661042.pdf?sequence=1&quot;&gt;extranjero&lt;/a&gt; y que es muy fácil contratar equipos en el extranjero por 6 o menos dolares la hora.&lt;/p&gt;

&lt;p&gt;En este punto las personas me cuestionan que lo que los clientes deberían valorar es la “calidad superior”. A estas personas les pido que se documenten sobre cómo funciona en Colombia la compra de proyectos de software.&lt;/p&gt;

&lt;p&gt;Recuerden que quienes toman las decisiones de un proyecto no les interesa si se hizo en COBOL, en SQL, en Ruby o en Scala. Si se están usando las tecnologías más &lt;em&gt;hipsters&lt;/em&gt; y &lt;em&gt;trendy&lt;/em&gt; o no. Lo que les interesa es el resultado financiero del ejercicio y, si alguien me lo promete por la mitad de lo que usted cobra, pues que decisión más sencilla.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“La industria del software empresarial en Colombia necesita poner los pies en la tierra, mejorar su estándares y condiciones laborales generales, si quiere algún día llegar a ser un sector competitivo.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Estoy seguro que esta aseveración se basa en “me han contado”, “supe de alguien que”, etc.&lt;/p&gt;

&lt;p&gt;Esas historias también las he escuchado. De las personas que entrevistamos y de las personas que trabajan conmigo. Y de nuevo, tomando como ejemplo el argumento del equipo talentoso del señor Buriticá, puedo aseverar que nuestra PyME es diferente a lo que él considera como empresas no competitivas. Esto, naturalmente, se ha convertido en nuestro mayor mecanismo de consecución de personas talentosas.&lt;/p&gt;

&lt;p&gt;Pero no solo es encontrarlas. Es darles espacio para el desarrollo de su autonomía y su maestría en el contexto de la ejecución de un propósito aprovechando la inteligencia distribuída. Son estos los fundamentos del “Manual de Identidad” de nuestra PyME.&lt;/p&gt;

&lt;p&gt;Tenemos un equipo de personas dedicadas a fomentar el bienestar de las personas. No solo se trata de que tengan dos pantallas o que puedan tomar cerveza en la oficina. Es estar ahí en caso de fallecimiento de un ser querido, incapacidad, paternidad o maternidad, libranzas, etc. Lo hemos venido haciendo desde que podemos, así no siempre hayamos podido exportar nuestros servicios al exterior y entendiendo las restricciones de no haber iniciado esta empresa con capital nacional o extranjero.&lt;/p&gt;

&lt;p&gt;La excelencia técnica de los equipos de esta PyME es reconocida por nuestros clientes y nuestros pares. Como el señor Buriticá dice, eso depende de la orientación técnica de nuestra empresa. Vale la pena aclarar que esa orientación técnica la tenemos hace rato, por lo que a nuestra PyME hasta este punto el artículo no nos ha generado valor.&lt;/p&gt;

&lt;h2 id=&quot;hay-que-culpar-a-los-desarrolladores&quot;&gt;Hay que culpar a los desarrolladores&lt;/h2&gt;
&lt;p&gt;Ha sido interesante que en ninguno de los dos artículos se ha mencionado la responsabilidad que tienen lo desarrolladores en este problema.&lt;/p&gt;

&lt;p&gt;Queridos desarrolladores, si quieren valer más, háganse más valiosos. Esta opinión ya la expuse claramente en &lt;a href=&quot;https://sis-temas.uniandes.edu.co/un-desarrollador-de-20-millones-mensuales/&quot;&gt;“Un desarrollador de 20 millones mensuales”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Si quieren tener mejor salario, hagan un trabajo que sea más valioso. ¿Cómo? Si nos compran por ROI, generen ROI. Así sea usando COBOL, pues eso es lo de menos.&lt;/p&gt;

&lt;p&gt;Aprendan inglés. Estudien mucho. No le tengan miedo a los &lt;em&gt;papers&lt;/em&gt;. Pregunten, equivoquense, aprendan. ¡Lean! Propongan, cuestionen, sacien su curiosidad. No esperen a los proyectos para aprender, lleguen aprendidos. Escriban y lean código todos los días. Aprendan a escribir y hablar asertivamente. Ojo con la ortografía y la redacción. Sean empáticos con los problemas a resolver, pues siempre hay un alguien que se va a beneficiar y no necesariamente es ROI. Recuerden que hacer software es una expresión de amor.&lt;/p&gt;

&lt;h2 id=&quot;hay-que-llegar-a-una-conclusin-que-no-solucione-nada&quot;&gt;Hay que llegar a una conclusión que no solucione nada&lt;/h2&gt;
&lt;p&gt;Para poder cerrar, quiero cerrar como lo hicieron los autores de los blogs que inspiraron esta respuesta. Seguir opinando y emitiendo juicios de valor sin sentido sobre lo que yo creo que es correcto (a pesar de que estoy seguro que no implica nada).&lt;/p&gt;

&lt;p&gt;La escasez de talento la hemos afrontado con mucho cariño y respeto. Cariño, en cuanto a la paciencia y humildad que hay que tener frente a los desarrolladores que hasta ahora están entrando al mundo laboral o, a aquellos que lamentablemente han pasado por proyectos mal ejecutados. Respeto, por lo que saben, por lo que son y valorándolos por su potencial inmediato.&lt;/p&gt;

&lt;p&gt;Cada vez que alguien se va de nuestra empresa le pregunto: “¿lo que hizo y aprendió en S4N le sirvió para conseguir su nuevo trabajo?” Gracias a todo el esfuerzo de los diferentes equipos de nuestra PyME, esta respuesta &lt;strong&gt;siempre&lt;/strong&gt; ha sido positiva.&lt;/p&gt;

&lt;p&gt;Es un despropósito estar culpando a unos o a otros. No tiene fin y se queda en chisme, rumor y charla de pasillo. Más bien los invito a demostrar a través del ejemplo, en vez de estar hablando tanto de cosas que no entienden, ni viven, ni resuelven.&lt;/p&gt;

&lt;h5 id=&quot;nota-sobre-lenguaje-incluyente&quot;&gt;*Nota sobre lenguaje incluyente&lt;/h5&gt;
&lt;p&gt;Los conocidos, lamentables y reprochables horrores que viven muchas personas debido a su condición social, sexual, física, moral y/o religiosa, nos ha llevado a cuestionar la forma más correcta de hablar y escribir.&lt;/p&gt;

&lt;p&gt;Después de mucho leer, no he logrado llegar a la conclusión de cuál es la mejor manera de referirse a los desarrolladores de software. ¿Debe ser desarrolladores y desarrolladoras? ¿Desarrolladoras y desarrolladores? ¿Ingenieros e ingenieras de software? ¿ingenieras e ingenieros de software? ¿Debería hacerle caso a la &lt;a href=&quot;http://lema.rae.es/dpd/srv/search?id=Tr5x8MFOuD6DVTlDBg&quot;&gt;RAE&lt;/a&gt;? ¿Debería seguir mi intuición y dejar evolucionar el lenguaje y dejar de seguirle la corriente a la RAE? ¿Debería seguir una fuente diferente y seguir la línea &lt;em&gt;deconstructista&lt;/em&gt; de Derrida sobre el &lt;a href=&quot;http://ruc.udc.es/bitstream/2183/2139/1/AD-5-17.pdf&quot;&gt;género&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Por facilismo me acojo a las reglas de la RAE, sin desconocer las implicaciones que esto trae, cruzando los dedos para que eventualmente nuestra sociedad se decida a estandarizar la natural evolución del lenguaje (esta &lt;a href=&quot;https://stallman.org/articles/castellano-sin-genero.html&quot;&gt;idea&lt;/a&gt; siempre me ha gustado).&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://b.yujikiriki.com/2014/11/18/futuros_y_actores</id>
    <link type="text/html" rel="alternate" href="http://b.yujikiriki.com/2014/11/18/futuros_y_actores.html"/>
    <title>Futuros y actores en Scala y Akka</title>
    <updated>2014-11-18T00:00:00-05:00</updated>
    <author>
      <name>Miguel Vila, Yuji Kiriki</name>
      <uri>http://yujikiriki.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Tradicionalmente, construir aplicaciones que soporten concurrencia en la JVM siempre ha sido problema del servidor de aplicaciones. Pocas veces nos veíamos en la tarea de implementar o de pensar en problemas de semáforos, hilos y procesos y, cuando teníamos que hacerlo, es porque el servidor de aplicaciones no daba más.&lt;/p&gt;

&lt;p&gt;El número de usuarios y de aplicaciones integradas de hoy nos ha llevado a buscar alternativas ligeras y más adecuadas para soportar crecimientos súbitos en la demanda de recursos, de conexiones y de la disponibilidad misma de las aplicaciones; permitiendo dar respuestas correctas en un tiempo tolerable.&lt;/p&gt;

&lt;p&gt;Los Futuros en Scala (implementados &lt;a href=&quot;http://docs.scala-lang.org/overviews/core/futures.html&quot;&gt;en&lt;/a&gt; &lt;a href=&quot;https://github.com/scalaz/scalaz&quot;&gt;varias&lt;/a&gt; &lt;a href=&quot;https://twitter.github.io/finagle/&quot;&gt;librerías&lt;/a&gt;) y el modelo de actores en Akka, permiten modelar e implementar soluciones que aprovechan las características del hardware moderno: múltiples núcleos de procesamiento, centenas de miles de megas de memoria; redundando en la capacidad de soportar concurrencia aumentando su disponibilidad y comportamiento correcto.&lt;/p&gt;

&lt;p&gt;Los beneficios no solo se miden a través del desempeño de una solución. El nivel de abstracción en el que se razona sobre Futuros o actores permite diseñar y escribir código concurrente y paralelo, de fácil lectura, que atiende la concurrencia de manera elegante y digerible.&lt;/p&gt;

&lt;p&gt;Por estos hechos y razones, consideramos compartir una análisis a través de la cual puedan hacer la elección de la herramienta más adecuada para sus escenarios donde se presente concurrencia, proponiendo y promoviendo así el “fin de vida” de lo servidores de aplicaciones.&lt;/p&gt;

&lt;h3 id=&quot;cundo-actores&quot;&gt;Cuándo Actores&lt;/h3&gt;

&lt;p&gt;La mayor ventaja del modelo de actores sobre los futuros es su capacidad de mantener estado y protegerlo de la concurrencia. Si a esta propiedad se le suma su similitud con la noción de objetos del paradigma orientado a objetos (OO), las soluciones que se pueden implementar son simples y potentes.&lt;/p&gt;

&lt;p&gt;Lo simple nace del fomento de la &lt;a href=&quot;https://s3.amazonaws.com/bitacora/2013/04/13/simpatia_semantica.html&quot;&gt;simpatía semántica&lt;/a&gt; al combinar el modelo de actores con los principios del diseño OO. Esta combinación puede entenderse como un &lt;a href=&quot;http://en.wikipedia.org/wiki/Mutualism_(biology)&quot;&gt;mutualismo&lt;/a&gt; donde, en la solución de software, el modelo de actores se ve fortalecido por OO y OO se ve enriquecido por el modelo de actores.&lt;/p&gt;

&lt;p&gt;El mutualismo se fundamenta en la noción de estado de los actores y de los objetos. Al ser dos ideas análogas, se pueden aplicar los principios de OO en el diseño de los actores, siendo cada uno de ellos interpretados como objetos que protegen su encapsulamiento a través del intercambio de mensajes.&lt;/p&gt;

&lt;p&gt;En una &lt;a href=&quot;http://www.drdobbs.com/architecture-and-design/interview-with-alan-kay/240003442?pgno=3&quot;&gt;entrevista&lt;/a&gt;, Alan Kay (para algunos el fundador del paradigma objetual), admite esta relación:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Binstock:&lt;/strong&gt; How do you view the Actor model?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Kay:&lt;/strong&gt; The first Smalltalk was presented at MIT, and Carl Hewitt and his folks, a few months later, wrote the first Actor paper. The difference between the two systems is that the Actor model retained more of what I thought were the good features of the object idea, whereas at PARC, we used Smalltalk to invent personal computing. It was actually a practical programming language as well as being interesting theoretically. I don’t think there were too many practical systems done in Actors back then.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cabe notar que OO es un paradigma de programación mientras que los actores son un modelo de computación. No obstante, la noción de estado sirve como articulador entre ellas.&lt;/p&gt;

&lt;p&gt;Ahondando en esta relación por el lado OO, podemos hacer uso de las prácticas de &lt;em&gt;Domain-Driven Design&lt;/em&gt;. Los patrones tácticos son fácilmente implementados en el modelo de actores permitiendo tener grafos de actores que modelan dominios de negocio. No solo ahí se fomenta el mutualismo. Si hacemos uso de los actores como &lt;a href=&quot;http://dspace.mit.edu/handle/1721.1/6952&quot;&gt;modelo de concurrencia para sistemas distribuidos&lt;/a&gt;, podemos escribir aplicaciones de software que implementan modelos de dominio listos para soportar concurrencia y para ser distribuidos en una red. Quizás, esta última, sea la característica de más potencial de los actores sobre los futuros.&lt;/p&gt;

&lt;p&gt;Otra ventaja de los actores sobre los futuros es la capacidad de distribuir trabajo sobre un sistema distribuido. A través de sus principios, el modelo de actores permite distribuir no solo concurrencia sino carga en varios nodos, permitiendo la presencia de procesamiento paralelo. No obstante, hay investigación de cómo tener funciones distribuidas.&lt;/p&gt;

&lt;p&gt;Es necesario recordar que el modelo de actores no es un artefacto de la programación funcional. Sin embrago desde el punto de vista de la programación funcional, los actores adolecen de:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;No determinismo: no hay garantía en la entrega de mensajes entre actores.&lt;/li&gt;
  &lt;li&gt;Implican side effects y tener una visión no local del sistema, lo que implica que no se puedan componer.&lt;/li&gt;
  &lt;li&gt;Los actores en Akka rechazan la unidad básica de modularidad: las funciones con efectos &lt;code&gt;A =&amp;gt; B&lt;/code&gt; por funciones con &lt;em&gt;side effects&lt;/em&gt; &lt;code&gt;Any =&amp;gt; Unit&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cundo-futuros&quot;&gt;Cuándo Futuros&lt;/h3&gt;

&lt;p&gt;Los futuros son una abstracción que sirve para representar acciones asíncronas. Pueden ser vistos como un mecanismo para manejar asincronía &lt;a href=&quot;https://blog.jcoglan.com/2013/03/30/callbacks-are-imperative-promises-are-functional-nodes-biggest-missed-opportunity/&quot;&gt;un nivel de abstracción por encima de usar &lt;em&gt;callbacks&lt;/em&gt;&lt;/a&gt;. Citando a &lt;a href=&quot;http://aboutwhichmorelater.tumblr.com/post/46862769549/futures-arent-ersatz-threads&quot;&gt;Marius Eriksen&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Futures model the real world truthfully: A Future[T] represents a T-typed result, which may or may not be delivered at some time in the future, or which may fail altogether. Like real-world asynchronous operations, a future is always in one of 3 states: incomplete, completed successfully, or completed with a failure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Existen diversas implementaciones de futuros en Scala: en la &lt;a href=&quot;http://www.scala-lang.org/api/2.11.4/#scala.concurrent.Future&quot;&gt;librería estándar&lt;/a&gt;, y en librerias como akka, finagle y scalaz. Para efectos de esta entrada lo importante es que estas instancias implementan:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Un constructor, que permite ejecutar asíncronamente un bloque de código y envolver su resultado en un futuro.&lt;/li&gt;
  &lt;li&gt;Las funciones map y flatMap que permiten manipular y componer futuros.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Los futuros presentan varias ventajas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Se pueden componer naturalmente. El API que se deriva de tener las funciones &lt;code&gt;map&lt;/code&gt; y &lt;code&gt;flatMap&lt;/code&gt; es bastante rico y permite secuenciar acciones asíncronas casi de la misma forma en la que uno maneja valores en un contexto síncrono (Esto claramente no es tan simple como suena: requiere un buen entendimiento del API de Futuros). La posiblidad de componer fácilmente Futuros parece ser la razón por la cuál Twitter se decantó por ellos y por eso construyó gran parte de su infraestructura en torno a &lt;a href=&quot;http://monkey.org/~marius/funsrv.pdf&quot;&gt;la idea de componer comportamiento a partir de funciones&lt;/a&gt;. En contraste parece que &lt;a href=&quot;http://www.reddit.com/r/IAmA/comments/23s80n/we_work_on_open_source_at_twitter_ask_us_anything/ch03le5&quot;&gt;por ahora el equipo de ingeniería de Twitter no piensa usar actores&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Solo requieren una visión local del sistema: Teniendo un &lt;code&gt;Future[A]&lt;/code&gt; solamente puedo crear un nuevo valor con una función &lt;code&gt;A =&amp;gt; B&lt;/code&gt; o una función &lt;code&gt;A =&amp;gt; Future[B]&lt;/code&gt;. En cambio los actores requieren razonar como interactúa un sistema de actores, qué mensajes se le debe mandar a otro actor, qué mensajes debe manejar otro actor, etc. La modularidad de un actor depende en gran parte de un conocimiento implícito de como responde a ciertos mensajes. &lt;a href=&quot;http://pchiusano.blogspot.com/2010/01/actors-are-not-good-concurrency-model.html&quot;&gt;Hay quienes piensan que la modularidad de una abstracción depende de que tanto permite&lt;/a&gt; usar &lt;a href=&quot;http://en.wikipedia.org/wiki/Pure_function&quot;&gt;funciones puras&lt;/a&gt;. Para ellos los &lt;em&gt;side effects&lt;/em&gt; perjudican la modularidad. La comunicación entre actores es un &lt;em&gt;side effect&lt;/em&gt; gigante y bajo esa perspectiva no son muy modulares. En cambio los futuros permiten usar funciones puras en sus transformaciones y por lo tanto permiten que sean reutilizados en contextos que no requieren un conocimiento implícito de la implementación.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;En general los futuros están en consonancia con muchas  de las ideas de programación funcional. Empezando por el hecho de que exigen contener algún valor uno siempre se ve obligado a manejar transformaciones de ese valor sea con &lt;code&gt;map&lt;/code&gt; o &lt;code&gt;flatMap&lt;/code&gt;. Esto no quiere decir que uno no pueda hacer futuros con &lt;em&gt;side effects&lt;/em&gt;. Uno perfectamente puede crear un &lt;code&gt;Future[Unit]&lt;/code&gt;, es decir un &lt;code&gt;Future&lt;/code&gt; sin valor dentro, por ejemplo: producto de haber imprimido en pantalla un resultado asíncrono. Entonces, si bien los Futuros no evitan que uno rompa las “reglas” de programación funcional, sí son un mecanismo de concurrencia que, a diferencia de los actores, permiten razonar sobre la transformación de un valor a partir de funciones puras. Adicionalmente los Futuros son inmutables en dos sentidos: por una parte cuando un Futuro se resuelve su valor no puede cambiar, lo que da pie a que una composición de futuros determine un grafo de ejecución y de transformación de valores. Por otra parte la mayoría del API de los Futuros no muta el estado sino que devuelve otro Futuro, lo que facilita razonar sobre ellos. En gran parte estas facilidades se dan por que los Futuros son &lt;a href=&quot;http://www.codecommit.com/blog/ruby/monads-are-not-metaphors&quot;&gt;monadas&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Otra ventaja, un poco relacionada con el anterior punto, es que los Futuros son declarativos. Permiten al usuario combinarlos sin que éste se preocupe de varias cosas: de qué estrategia usa el &lt;em&gt;pool de threads&lt;/em&gt; que lo está ejecutando o en qué momento se ejecuta la función que se pasa por parámetro, o como combinar múltiples Futuros sin importar cuál se resuelva primero, etc… En cambio los actores requieren un mayor grado de coordinación y por lo tanto dan mayor responsabilidad (y también libertad) al usuario.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por último los futuros tienen una desventaja considerable, que tiene que ver con los casos de uso para los cuales fueron ideados. Los futuros no son adecuados para manejar estado: por ejemplo tener estado mutable que puede ser modificado por dos futuros distintos es una receta para hacer un desastre. En general este es un corolario del consabido consejo de no compartir recursos entre &lt;em&gt;threads&lt;/em&gt; distintos. Por lo tanto es difícil utilizar futuros para modelar aspectos del dominio, aspectos que por lo general requieren algún tipo de estado. En conclusión los futuros sirven para manejar concurrencia y paralelismo de funciones que carecen de estado dentro de una misma JVM. Cuando se quiere realizar distribución entre distintas maquinas o concurrencia protegiendo estado los actores representan una abstracción adecuada.&lt;/p&gt;

&lt;h3 id=&quot;conclusin&quot;&gt;Conclusión&lt;/h3&gt;

&lt;p&gt;Los Actores y los Futuros son dos abstracciones útiles que permiten manejar concurrencia. El uso de uno no excluye automáticamente el uso del otro. Por el contrario, usualmente son colaborativos: e.g. un Actor puede despachar trabajo a un Futuro.&lt;/p&gt;

&lt;p&gt;En esta entrada analizamos las ventajas de cada uno y sus mejores casos de uso, pero cabe aclarar que el mundo de Scala es prolífico en abstracciones y hay muchas alternativas que pueden ser más adecuadas para ciertos casos de uso. Hay muchas que no mencionamos como &lt;a href=&quot;https://www.playframework.com/documentation/2.0/Iteratees&quot;&gt;Iteratees&lt;/a&gt;, &lt;a href=&quot;https://github.com/scalaz/scalaz-stream&quot;&gt;scalaz-streams&lt;/a&gt; y la iniciativa de &lt;a href=&quot;http://www.reactive-streams.org/&quot;&gt;Reactive Streams&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;El mundo de Scala y la JVM es rico, los actores y los Futuros son solo las primeras abstracciones que tenemos para explorar.&lt;/p&gt;

&lt;h3 id=&quot;referencias&quot;&gt;Referencias&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://monkey.org/~marius/funsrv.pdf&quot;&gt;Your server as a function&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://james-iry.blogspot.com/2009/04/erlang-style-actors-are-all-about.html&quot;&gt;Erlang Style Actors Are All About Shared State&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://channel9.msdn.com/Shows/Going+Deep/Hewitt-Meijer-and-Szyperski-The-Actor-Model-everything-you-wanted-to-know-but-were-afraid-to-ask&quot;&gt;The Actor Model (everything you wanted to know, but were afraid to ask)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://pchiusano.blogspot.com/2010/01/actors-are-not-good-concurrency-model.html&quot;&gt;Actors are not a good concurrency model&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.chrisstucchio.com/blog/2013/actors_vs_futures.html&quot;&gt;Don’t use Actors for concurrency&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://noelwelsh.com/programming/2013/03/04/why-i-dont-like-akka-actors/&quot;&gt;Why I Don’t Like Akka Actors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://boundary.com/blog/2014/09/03/no-you-cant-have-a-pony/&quot;&gt;Actors, Green Threads and CSP On The JVM – No, You Can’t Have A Pony&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://aboutwhichmorelater.tumblr.com/post/46862769549/futures-arent-ersatz-threads&quot;&gt;Futures aren’t ersatz threads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  
  <entry>
    <id>http://b.yujikiriki.com/2014/03/09/consistencia</id>
    <link type="text/html" rel="alternate" href="http://b.yujikiriki.com/2014/03/09/consistencia.html"/>
    <title>Consistencia</title>
    <updated>2014-03-09T00:00:00-05:00</updated>
    <author>
      <name>Yuji Kiriki</name>
      <uri>http://yujikiriki.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Entender cómo funciona la consistencia en un sistema distribuido es quizas la herramienta más versatil para diseñar e implementar aplicaciones de software tolerantes a fallas, escalables y de desempeño adecuado.&lt;/p&gt;

&lt;p&gt;Pienso que es importante escribir sobre la consistencia debido a que su entendimiento común puede facilitar y enriquecer discusiones de diseño y arquitectura entre las personas. Su mal entendimiento puede llevar a un equipo de trabajo creer en soluciones místicas gobernadas por leyes “superiores” a la matemática.&lt;/p&gt;

&lt;p&gt;La intención de esta entrada es tratar de resumir un considerable número de papers, artículos y blogs que he leído durante los últimos meses, esperando hacer justicia a los distintos autores.&lt;/p&gt;

&lt;h3 id=&quot;definicin&quot;&gt;Definición&lt;/h3&gt;

&lt;p&gt;Para esta entrada la consistencia no será considerada un atributo de calidad de un sistema dado que, basandose en el catalogo de atributos de calidad del &lt;em&gt;Software Engineering Institute&lt;/em&gt; (SEI) en su reporte técnico CMU/SEI-95-TR-021 de 1995, esta no se encuentra definida.&lt;/p&gt;

&lt;p&gt;Que la consistencia no sea tratada como atributo de calidad tiene sentido pues según vayamos ahondando en su definición, lo que coloquialmente buscamos y consideramos “consistencia” es realmente que un sistema manifieste propiedades de integridad y confidencialidad de la información. No obstante, si se detalla de definición de integridad se puede concluir que la integridad asume la consistencia.&lt;/p&gt;

&lt;p&gt;Lo que sí podemos decir es que la consistencia trata sobre las operaciones (transacciones) que se realizan sobre un dato o sobre un conjunto de datos, según el modelo de consistencia del que se está hablando.&lt;/p&gt;

&lt;p&gt;Cuando se habla sobre la consistencia se debe hablar sobre los distintos modelos de consistencia, más que sobre la consistencia &lt;em&gt;per se&lt;/em&gt;. En general se reconocen dos tipos de modelo de consistencia: modelo de consistencia fuerte y modelo de consistencia debil.&lt;/p&gt;

&lt;p&gt;Un modelo de consistencia establece un contrato entre el desarrollador de un sistema y el sistema donde, si el desarrollador sigue las reglas del sistema, el sistema le garantizará que los resultados de las operaciones realizadas sobre sus datos sea predecible&lt;a href=&quot;http://en.wikipedia.org/wiki/Consistency_model&quot;&gt;1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hablar sobre los modelos de consistenia más populares: causal, secuencial, serializable, eventual, etc.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://b.yujikiriki.com/2013/09/21/soa_agil</id>
    <link type="text/html" rel="alternate" href="http://b.yujikiriki.com/2013/09/21/soa_agil.html"/>
    <title>SOA ágil</title>
    <updated>2013-09-21T00:00:00-05:00</updated>
    <author>
      <name>Yuji Kiriki</name>
      <uri>http://yujikiriki.com/</uri>
    </author>
    <content type="html">&lt;p&gt;La comunidad de metodologías ágiles en Colombia, particularmente la de Medellín, logró convocar a más de 600 personas en un mismo lugar para compartir conocimiento y experiencias fundamentadas en los 12 principios del manifiesto ágil. Tuve la fortuna de asistir y de escuchar varias charlas y presentaciones las cuales por su calidad superaron mis expectativas.&lt;/p&gt;

&lt;p&gt;Hubo una en particular cuyo nombre me llamó muchísimo la atención: “SOA ágil”. A pesar de los esfuerzos del expositor, pienso que la charla dejó muchos vacíos pues percibí que sus ideas estaban sesgadas por analogías a una reconocida metodología de un proveedor de tecnología.&lt;/p&gt;

&lt;p&gt;Esta entrada la debía de tiempo atrás y gracias a una invitación me animé a escribirla. La idea de esta entrada es dejar escritas ideas que he venido recopilando para luego unirlas y así poder proponer lo que considero puede ser un buen aproximamiento a una “SOA ágil”.&lt;/p&gt;

&lt;h3 id=&quot;algunas-notas-de-historia&quot;&gt;Algunas notas de historia&lt;/h3&gt;

&lt;p&gt;En el año 2006 Jim Webber introdujo el concepto de &lt;em&gt;&lt;a href=&quot;http://www.infoq.com/interviews/jim-webber-qcon-london&quot;&gt;Guerilla SOA&lt;/a&gt;&lt;/em&gt; la cual proponía, para ese entonces, la &lt;em&gt;subversiva&lt;/em&gt; idea de eliminar los largos ejércitos de consultores, los &lt;em&gt;middleware&lt;/em&gt; grasosos, los cronogramas de años, y el acercamiento &lt;strong&gt;STOP THE WORLD&lt;/strong&gt; de los proyectos “SOA” típicos de ese entonces.&lt;/p&gt;

&lt;p&gt;Su idea se fundamentaba en el hecho de que ese acercamiento a SOA es demasiado pesado. Propuso una forma de hacerlo más ligera y sin depender de productos o &lt;em&gt;middleware&lt;/em&gt; particulares para obtener resultados visibles en corto tiempo y que generaran valor de negocio medible.&lt;/p&gt;

&lt;p&gt;Según Webber &lt;em&gt;Guerilla SOA&lt;/em&gt; es ligera cuando los equipos de ejecución de tales proyectos son pequeños y si se focalizan en una capacidad de negocio a la vez, entregando resultados de manera incremental e iterativa. Así mismo, el hecho de eliminar las grasosas cajas negras como BPMS o ESB encontró que REST (en esa época la bautizó MEST) cumplía de mejor manera las los atributos de calidad que el cliente esperaba y respondiendo rápido a sus exigencias.&lt;/p&gt;

&lt;p&gt;Unos meses después, en Septiembre del 2007, me &lt;a href=&quot;http://highscalability.com/amazon-architecture&quot;&gt;encontré&lt;/a&gt; con que Amazon hacía uso de una arquitectura basada en servicios y que seguía los principios no solo de &lt;em&gt;Guerilla SOA&lt;/em&gt; sino que proponía algunas ideas radicales para su época tales como: un equipo pequeño por servicio (de 8 a 10 personas por servicio); que el 70% de sus servicios fuesen REST; una infraestructura en la que no se compartan recursos entre servicios (tales como bases de datos, eliminando así SPOF); entre muchas más que pueden encontrar en ese artículo.&lt;/p&gt;

&lt;p&gt;Pasaron unos años y en Junio del 2012 Netflix publicó una serie de &lt;a href=&quot;http://techblog.netflix.com/2012/06/netflix-operations-part-i-going.html&quot;&gt;artículos&lt;/a&gt; donde cuentan cómo pasaron de una aplicación monolítica a todo un ecosistema de servicios que sobra decir, son distribuidos. Lo que más me llamó la atención de la serie fue cómo, el hecho de distribuir los servicios no solo impactó positivamente la velocidad de entrega de las capacidades de negocio requeridas sino a que los equipos se vieron forzados a dividirse por servicio y la infraestructura se particularizó por servicio.&lt;/p&gt;

&lt;p&gt;¿Y el mal llamado “Gobierno SOA”? Se dieron cuenta que tal cosa sólo iba en contravía de su objetivo estratégico como unidad de negocio que es entregar valor a la organización &lt;strong&gt;YA&lt;/strong&gt;. ¿Qué hicieron? Abrazar el caos, volverlo parte de su operación y dejar de luchar contra ese hecho.&lt;/p&gt;

&lt;p&gt;Lo más increíble de cómo Netflix opera es que luego empezaron a abrir a la comunidad muchos de sus componentes clave para su arquitectura de servicios distribuidos. ¿Quién “gobierna” esos componentes? Un pequeño equipo. ¿Quién reutiliza los servicios de esos componentes? Quien lo necesite y quiera. ¿Y si necesito reutilizar uno de esos servicios pero con un par de diferencias? Cópielo, modifíquelo, publíquelo y manténgalo.&lt;/p&gt;

&lt;p&gt;Esa lógica pone en evidencia las caóticas cualidades de cualquier sistema distribuido y que, en vez de pelear contra ellas, las &lt;strong&gt;asume&lt;/strong&gt; y las hace parte de su cotidianidad.&lt;/p&gt;

&lt;p&gt;En Marzo del 2012 leí por primera vez acerca de los micro-servicios, una idea propuesta e implementada por James Lewis. Dejo esta idea cronológicamente después de la serie de artículos de Netflix pues pienso que así, cuando mezcle las ideas, será más fácil para el lector entenderme.&lt;/p&gt;

&lt;p&gt;Los micro-servicios son una manera muy interesante de implementar una SOA. En pocas palabras un micro-servicio es una pequeña aplicación (en funcionalidad y en líneas de código) que cumple una sola función y la cual se comunica con otras pequeñas aplicaciones a través de un mecanismo común, tal y como funcionan las aplicaciones de Unix que se comunican a través de cadenas de caracteres.&lt;/p&gt;

&lt;p&gt;Piensen en los comandos &lt;em&gt;cat&lt;/em&gt; y &lt;em&gt;grep&lt;/em&gt; por ejemplo. Estas aplicaciones pueden componer su funcionamiento a través del &lt;em&gt;pipe&lt;/em&gt; &lt;code&gt;&quot;|&quot;&lt;/code&gt;. Solo que los micro-servicios en vez de comunicarse a través de cadenas de caracteres se comunican a través del intercambio de mensajes usando &lt;strong&gt;respetuosamente&lt;/strong&gt; el protocolo HTTP.&lt;/p&gt;

&lt;p&gt;Una de las ideas más valiosas de los micro-servicios es que, en palabras de Lewis, si un micro-servicio necesita cambiar su comportamiento o tiene algún error de programación, es preferible rehacer el micro-servicio que modificarlo. Si necesita reutilizar un micro-servicio existente pero omitiendo o agregando un comportamiento particular, copie pegue modifique y publique un nuevo micro-servicio.&lt;/p&gt;

&lt;p&gt;A primera vista esa idea puede llevar al lector incauto a pensar que eso no respeta el principios de &lt;em&gt;“Don’t Repeat Yourself”&lt;/em&gt; (DRY), pero en serio pregúntense ahora, evitar el “copy + paste” ¿es realmente DRY?&lt;/p&gt;

&lt;p&gt;Les pregunto ¿un cambio de comportamiento de un servicio existente, por mínimo que sea, no implica que es un comportamiento &lt;em&gt;distinto&lt;/em&gt;? ¿Quién les mintió diciéndoles que factorizar comportamiento es la forma a través de la cual se logra mayor reutilización?&lt;/p&gt;

&lt;p&gt;En marzo de este año el equipo técnico de Gilt publicó un corto &lt;a href=&quot;http://tech.gilt.com/post/46359463184/26-3-13-todays-noon-outage-and-what-were-doing-to&quot;&gt;artículo&lt;/a&gt; describiendo las causas de la indisponibilidad que presentó su aplicación y cómo esta los llevo a pensar e implementar “LOSA” (Lots of Small Applications). Para su momento la idea no es nueva y es muy parecida a lo que venía haciendo Webber, Amazon, Netflix y Lewis tiempo atrás: muchas aplicaciones altamente desacopladas y aisladas permitiendo caídas parciales (&lt;a href=&quot;http://skife.org/architecture/fault-tolerance/2009/12/31/bulkheads.html&quot;&gt;bulk pattern&lt;/a&gt;) y protegiéndose así de indisponibilidades generales.&lt;/p&gt;

&lt;h3 id=&quot;soa-gil&quot;&gt;SOA ágil&lt;/h3&gt;

&lt;p&gt;Una SOA tiene una naturaleza caótica debido a que hereda todas las características de un sistema distribuido. Normalmente un sistema distribuido es caótico pues es difícil predecir cómo se va a comportar, particularmente ante fallas. De ser fácil, la industria no tendría que hacer extensivas pruebas de capacidad a las aplicaciones para saber cómo se van a comportar ante situaciones límite o de borde.&lt;/p&gt;

&lt;p&gt;Las fallas en este tipo de arquitectura se vuelven tan difíciles de predecir que Netflix diseño y publicó el proyecto &lt;a href=&quot;http://techblog.netflix.com/2012/07/chaos-monkey-released-into-wild.html&quot;&gt;Chaos Monkey&lt;/a&gt; el cual permite simular fallas al azar para así poder diseñar e implementar mecanismos que les permita responder ante distintas eventualidades.&lt;/p&gt;

&lt;p&gt;Si a esta naturaleza caótica de una buena SOA le sumamos que el negocio necesita sacar productos o servicios nuevos antes que su competencia para no quebrar y nosotros como desarrolladores estamos constantemente agregando o modificando funcionalidades ¿Qué hacemos? ¿”Gobierno de servicios” con un UDDI por unas cuantas decenas de miles de dólares para estandarizar y reutilizar? ¿Qué es reutilizar realmente? ¿Más plata para el proveedor para que meta más servidores en “alta disponibilidad” sin saber que al ser mi aplicación tan monolítica no se va a aprovechar los recursos disponibles de manera eficiente? ¿Desplegar varios ESB en “alta disponibilidad” donde está significa comprar más hardware y software propietario?&lt;/p&gt;

&lt;p&gt;Aquí es donde entra la fresca, simple y ágil SOA. La idea es atacar con simplicidad el comportamiento de un sistema distribuido y abrazando confiado su entropía.&lt;/p&gt;

&lt;p&gt;Si se fijan en las referencias de la sección anterior todas buscan simplificar el modelo de implementación de sus servicios. Todas las ideas buscan eliminar puntos únicos de falla. Todas buscan responder eficaz y eficientemente a las necesidades del negocio. Todas buscan adaptarse al caos y asumirlo.&lt;/p&gt;

&lt;p&gt;Así, parándome en los hombros de gigantes, les propongo 8 heurísticas de una SOA ágil:&lt;/p&gt;

&lt;h4 id=&quot;no-hay-gobierno&quot;&gt;1. No hay gobierno&lt;/h4&gt;

&lt;p&gt;¿Qué es gobierno? ¿Comprar un producto? ¿Quiere salir con un producto nuevo de su empresa al mercado en el menor tiempo posible? No limite a su equipo de desarrollo en seguir políticas inútiles que no le ayudan a disminuir entropía sino que la aumenta y la burocratiza.&lt;/p&gt;

&lt;p&gt;El problema no es controlar. Lo que se debe buscar es estandarizar aspectos generales tales como seguridad y protocolos y deje que la innovación emerja. Más de esto en las siguientes heurísticas.&lt;/p&gt;

&lt;h4 id=&quot;no-hay-restricciones-en-tecnologa&quot;&gt;2. No hay restricciones en tecnología&lt;/h4&gt;

&lt;p&gt;Si se especializa un equipo por servicio ¿quién tiene el mejor criterio para saber cuáles son las tecnologías más adecuadas para su implementación? El equipo que lo va a desarrollar. No impida que su organización obtenga mejores resultados en consumo de recursos o en la velocidad en salir al mercado por viejas y acartonadas costumbres o por “tranquilidad”.&lt;/p&gt;

&lt;h4 id=&quot;s-hay-restricciones-va-estilos-arquitectnicos&quot;&gt;3. Sí hay restricciones vía estilos arquitectónicos&lt;/h4&gt;

&lt;p&gt;Las restricciones son necesarias como las reglas mínimas de un juego. Las restricciones propuestas por REST son la mejor alternativa para liberar de restricciones de tecnología a sus equipos de trabajo pues todos los servicios se acoplan a un protocolo y no a contratos RPC.&lt;/p&gt;

&lt;p&gt;Entrene a sus equipos en patrones arquitectónicos. Defina arquitecturas de referencia de uso opcional y publíquelos en una wiki. Si la wiki es buena y útil tendrá adopción.&lt;/p&gt;

&lt;h4 id=&quot;no-hay-jerarqua-sino-equipos-con-responsabilidades-bien-definidas&quot;&gt;4. No hay jerarquía sino equipos con responsabilidades bien definidas&lt;/h4&gt;

&lt;p&gt;Especialice y responsabilice a los equipos de trabajo por capacidad de negocio. No separe al desarrollo de la infraestructura. Logre que sus equipo de desarrollo se responsabilicen de la infraestructura. Permita que la arquitectura de su organización emerja. (En alguna otra ocasión escribiré sobre la “nube”, la idea más gaseosa de todos los tiempos)&lt;/p&gt;

&lt;h4 id=&quot;fork-clone-pull-request&quot;&gt;5. Fork, Clone, Pull request&lt;/h4&gt;

&lt;p&gt;¿Reutilización? Métase ya mismo a Github y disfrute de lo que en realidad es reutilización. Reutilización no es factorizar comportamiento, es especializarlo (algún día escribiré sobre este punto). Es usar librerías que voy encontrando por ahí y que están mantenidos por alguien con quien nunca he hablado. Lo importante es que el código está ahí para leerlo, tocarlo, modificarlo, copiarlo.&lt;/p&gt;

&lt;p&gt;Imagine por un segundo que su empresa tiene un Github pero en vez de proyectos se publican servicios pequeños. Luego, si otro equipo necesita ese servicio, sencillamente lo clona y lo usa. Si necesita reutilizar algo de ese servicio, le hace &lt;em&gt;fork&lt;/em&gt; y reutiliza el pedazo que le interesa. Si descubre un &lt;em&gt;bug&lt;/em&gt; lo puede reportar o inclusive reparar y proponer un &lt;em&gt;Pull Request&lt;/em&gt;. Si necesita un servicio parecido a uno ya publicado, hágale fork, modifique y publique.&lt;/p&gt;

&lt;h4 id=&quot;auto-organizacin&quot;&gt;6. Auto-organización&lt;/h4&gt;

&lt;p&gt;Si no controla la exposición de servicios debe aprender que el caos tiende al orden. Por ejemplo, los servicios más transversales y utilizados por lo demás serán aquellos que maduren más rápido (como los proyectos Apache o Linux). Los servicios con mayor tendencia a reutilizarse emergerán solos y madurarán por su uso e importancia. Aún más interesante: si todos sus servicios publican métricas de su comportamiento usted los podrá identificar y priorizar por su uso y comportamiento más que porque un &lt;em&gt;Arquitecto Empresarial&lt;/em&gt; lo decidió así.&lt;/p&gt;

&lt;h4 id=&quot;distribuido&quot;&gt;7. Distribuido.&lt;/h4&gt;

&lt;p&gt;SOA es distribuido. Los servicios son pequeñas aplicaciones que se comunican por red que modelan una capacidad de negocio. ¿Tiene una sola base de datos? No tiene SOA (sad panda). ¿Tiene integraciones por datos? No tiene SOA (sad panda). ¿Tiene una base de datos por servicio? ¡Sí tiene SOA! (happy panda) ¿Si se cae un servidor su empresa queda sin aplicación? No tiene SOA (sad panda). ¿Si se cae un servidor sólo se cae un servicio y el resto de su empresa sigue funcionando sin problemas? Sí tiene SOA (happy panda). Fácil.&lt;/p&gt;

&lt;h4 id=&quot;reutilizacin-redundancia-replicacin-y-duplicidad&quot;&gt;8. Reutilización, redundancia, replicación y duplicidad.&lt;/h4&gt;

&lt;p&gt;No sé quién nos metió en la cabeza que reutilizar es factorizar comportamiento (acoplamiento vertical, ¿alguien?). No sé quién nos vendió la idea de que replicar datos es tan malo como duplicarlos. No sé quién nos enseñó que la única manera de tener aplicaciones disponibles es a punta de plata comprando infraestructura redundante (pura fuerza bruta y cero ingeniería).&lt;/p&gt;

&lt;p&gt;Para este punto si lea, estudie, analice y observe como aplicaciones Web como Facebook, Amazon, Netflix, Instagram, Gmail, Google Maps, Simple Bank, entre muchísimas más funcionan. Estoy seguro que su empresa no está ni cerca de lo caótico y complejo ni del volumen de transacciones que estas aplicaciones soportan. ¡Y sin &lt;em&gt;middleware&lt;/em&gt;!&lt;/p&gt;

&lt;h3 id=&quot;cierre&quot;&gt;Cierre&lt;/h3&gt;

&lt;p&gt;Soy consciente que no todas las heurísticas son fáciles de digerir. Obviamente por alguna razón del perverso universo usted no se sienta capaz de &lt;em&gt;políticamente&lt;/em&gt; asumir el reto de tener una SOA ágil.&lt;/p&gt;

&lt;p&gt;Abrace el Caos. Deje que él mismo lleve a que su ecosistema de aplicaciones tienda al orden. Construya aplicaciones simples, pequeñas y autónomas desde su comportamiento hasta su infraestructura. No se mate buscando que estructura factorizar para después arrepentirse. No desperdicie plata en &lt;em&gt;middleware&lt;/em&gt; innecesario que sólo le da tranquilidad al político y no al técnico. Permita que su equipo técnico innove. Permita que su arquitectura emerja restringiendo su estilo y orientandola a través de múltiples arquitecturas de referencia. Sea costo eficiente y use la ingeniería no la fuerza bruta. Respóndale rápido al negocio y apalanque el crecimiento de su empresa.&lt;/p&gt;

&lt;p&gt;¿Qué opinan?&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://b.yujikiriki.com/2013/05/07/bus_de_eventos_de_dominio</id>
    <link type="text/html" rel="alternate" href="http://b.yujikiriki.com/2013/05/07/bus_de_eventos_de_dominio.html"/>
    <title>Bus de eventos de dominio</title>
    <updated>2013-05-07T00:00:00-05:00</updated>
    <author>
      <name>Yuji Kiriki</name>
      <uri>http://yujikiriki.com/</uri>
    </author>
    <content type="html">&lt;p&gt;El Agregado puede ser el patrón táctico más importante de #DDDesign pues nos permite fijar limites transaccionales a nuestras entidades de negocio. Es interesante cómo aplicando sabiamente este patrón se facilita la construcción de aplicaciones que soportan considerables volumenes de concurrencia.&lt;/p&gt;

&lt;p&gt;Sin embargo me he encontrado más de una vez con la dificultad de representar las relaciones existentes entre Entidades que pertenecen a Agregados distintos dado que no deberían conocerse; al menos no directamente. Esta dificultad aumenta cuando además un cambio de estado en un Agregado tiene consecuencias (side-effects) en otros Agregados.&lt;/p&gt;

&lt;p&gt;Vaughn Vernon explica en su &lt;a href=&quot;https://vaughnvernon.co/?p=139&quot;&gt;artículo&lt;/a&gt; que este tipo de relaciones se pueden modelar de varias maneras dependiendo del escenario. El acercamiento más interesante es cuando explica como podemos hacer uso (o abuso) de la consistencia eventual para permear cambios ocurridos en un Agregado a otro a través de Eventos de Dominio.&lt;/p&gt;

&lt;p&gt;En teoría la solución planteada por Vernon es bastante fácil de aplicar y creo que pueden haber decenas de opciones para implementarla. No obstante en esta entrada de la bitácora les presento una a la que llegué haciendo uso de un bus de eventos lo cual, me permitió no solo implementar un sencillo patrón &lt;a href=&quot;http://www.eaipatterns.com/PublishSubscribeChannel.html&quot;&gt;Publicar-Suscribir&lt;/a&gt; en memoria sino que cuando llegó el momento pude de manera sencilla implementar protocolos de recuperación para fomentar la consistencia entre Agregados.&lt;/p&gt;

&lt;p&gt;Es importante recordar que un Agregado es responsable sólo de una transacción que manifiesta consistencia de ACID y no de CAP, mientras que una transacción de un Agregado que afecta otro agregado es “CAP consistente” y no “ACID consistente”. Por ejemplo, a un Agregado se le exige que la integridad de todos los elementos involucrados en la transacción sea garantizada o linealmente trazable. Sin embargo las transacciones que cobijan más de un Agregado deberían ser capaces de soportar la consistencia más débil (Consistencia Eventual) dado que transaccionalmente no son dependientes consecuencia de la definición del Modelo de Dominio. (Este párrafo debe ser ampliado en una futura entrada)&lt;/p&gt;

&lt;p&gt;A continuación les presento una esquematización de cómo comunicamos Agregados a través de los buses de eventos.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../imgs/event_bus.png&quot; width=&quot;526px&quot; height=&quot;372px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Como se describe en el diagrama, cada Agregado tiene acceso al Bus de Eventos y si un Agregado está interesado en los eventos del otro, define un Suscriptor al Bus de Eventos del Agregado que generará los Eventos de Dominios interesantes permitiendo una gran capacidad de evolución y composición de comportamiento.&lt;/p&gt;

&lt;h3 id=&quot;el-bus-de-eventos&quot;&gt;El bus de eventos&lt;/h3&gt;

&lt;p&gt;No es más que una abstracción a través de la cual se logra desacoplar publicadores de mensajes y suscriptores a esos mensajes. Una implementación sencilla la encontré en la librería de &lt;a href=&quot;http://code.google.com/p/guava-libraries/wiki/EventBusExplained&quot;&gt;Guava&lt;/a&gt;  y es la que usé en la implementación de ese proyecto. Cabe anotar que este bus de eventos es siempre inyectado como Singleton a las entidades que van a publicar eventos vía &lt;a href=&quot;http://code.google.com/p/google-guice/wiki/Scopes&quot;&gt;Guice&lt;/a&gt;. Soy consiente que Singleton es una aberración de OO pero en este caso aplica bien y sin consecuencias en concurrencia.&lt;/p&gt;

&lt;p&gt;El bus de eventos resuelve de manera más sencilla lo que se busca al implementar el patrón Observador de GoF generando menor grado de acoplamiento pues implementa el patrón de Indirección de GRASP promoviendo alta cohesión y reutilización.&lt;/p&gt;

&lt;h3 id=&quot;los-eventos-de-dominio&quot;&gt;Los eventos de dominio&lt;/h3&gt;

&lt;p&gt;Cada vez que un Agregado ejecuta una transacción implica que se está realizando un cambio en el estado de alguna Entidad perteneciente al Agregado. Muchas veces esta modificación de estado implica cambios de estado en otras Entidades que no pertenecen al Agregado. Para soportar esta situación se puede hacer uso de Eventos de Dominio que representen estos hechos (cosas que pasaron) y publicarlas al Bus de Eventos.&lt;/p&gt;

&lt;p&gt;El Bus de Eventos notificará a los Suscriptores interesados en esos eventos quienes a su vez iniciarán una transacción en el Agregado al cual pertenecen, respetando así los límites transaccionales fijados. Piensen en estos Eventos de Dominio como &lt;a href=&quot;http://martinfowler.com/eaaCatalog/dataTransferObject.html&quot;&gt;DTOs&lt;/a&gt; que representan consecuencias de cambios en Entidades dentro de Agregados. En consecuencia administramos transacciones eventualmente consistentes entre Agregados en memoria y sin hacer uso de tecnologías grasosas e ineficientes.&lt;/p&gt;

&lt;p&gt;Una descripción más detallada de los Eventos de Domino la pueden encontrar en el libro de Vaughn Vernon “Implementing Domain-Driven Design” en el capítulo 8.&lt;/p&gt;

&lt;h3 id=&quot;posibilidades&quot;&gt;Posibilidades&lt;/h3&gt;

&lt;p&gt;Una vez hemos desacoplado los Agregados a través del Bus de Eventos podemos ir modificando los atributos transaccionales de los Eventos de Dominio. Por ejemplo, imaginen que alguna transacción de un Agregado consecuencia de una modificación en otro Agregado se toma demasiado tiempo. Fácilmente podemos crear un Suscriptor que una vez reciba la notificación de un nuevo Evento persista este evento en una &lt;a href=&quot;http://martinfowler.com/eaaDev/EventSourcing.html&quot;&gt;Fuente de Eventos&lt;/a&gt; y luego trate de iniciar la transacción. Si falla o se demora, podremos administrar muy granularmente los reintentos (exponential backoff por ejemplo) o la cantidad de recursos involucrados en la transacción.&lt;/p&gt;

&lt;p&gt;Igualmente, al estar utilizando el mecanismo de consistencia más débil, podemos evitarnos el uso de candados transaccionales o cualquier vicio de sincronización de procesos.&lt;/p&gt;

&lt;p&gt;También existe la posibilidad de tener bitácoras de auditoría de transacciones con solo crear Suscriptores genéricos que estén interesados en todo tipo de eventos para luego persistirlos. Fijense que esta última nos abre una puerta muy interesante: la evolutividad de mi aplicación es sencilla gracias al alto desacoplamiento que me permite tener el patrón Publicar-Suscribir.&lt;/p&gt;

&lt;h3 id=&quot;un-poco-ms-all&quot;&gt;Un poco más allá&lt;/h3&gt;

&lt;p&gt;De acá quedan abiertas muchas posibilidades. Por ejemplo aplicar otros patrones de Enterprise Integration Patterns a nuestro dominio. También crear Fuentes de Eventos consultables idempotentes por otros Aggregates para que estos se mantegan consistentes sin la necesidad de crear suscriptores, volviendo así autónomos algunos Agregado de nuestro dominio y, si mis Agregados son autónomos, puedo terminar construyendo Contextos Delimitados autónomos.&lt;/p&gt;

&lt;p&gt;Se podría pensar también que estos eventos no deberían estar limitados al dominio sino que es posible que estos puedan trascender inclusive Contextos Delimitados regalandonos una implementación de aplicaciones orientadas a eventos.&lt;/p&gt;

&lt;p&gt;¡Me encantaría saber qué opinan!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://b.yujikiriki.com/2013/04/13/simpatia_semantica</id>
    <link type="text/html" rel="alternate" href="http://b.yujikiriki.com/2013/04/13/simpatia_semantica.html"/>
    <title>Simpatía semántica</title>
    <updated>2013-04-13T00:00:00-05:00</updated>
    <author>
      <name>Yuji Kiriki</name>
      <uri>http://yujikiriki.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Durante una discusión tratando de explicar las responsabilidades de un equipo de desarrollo en los proyectos logramos llegar a definir cuál debería ser el objetivo cuando iniciamos el entendimiento de la problemática a resolver.&lt;/p&gt;

&lt;p&gt;Para poder explicar la definición, necesito que el lector entienda dos conceptos: &lt;strong&gt;ImpedanciaObjeto-Relación&lt;/strong&gt; y &lt;strong&gt;SimpatíaMecánica&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;La &lt;a href=&quot;http://en.wikipedia.org/wiki/Object-relational_impedance_mismatch&quot;&gt;ImpedanciaObjeto-Relación&lt;/a&gt; es el conjunto de dificultades técnicas y conceptuales que se encuentran cuando una base de datos relacional es utilizada por una aplicación escrita en un lenguaje orientado a objetos. Esta situación se encuentra, particularmente, cuando la definición de objetos y clases se quiere traducir en términos de tablas relacionales.&lt;/p&gt;

&lt;p&gt;Aprovechando la definición de &lt;strong&gt;ImpedanciaObjeto-Relación&lt;/strong&gt; puedo entonces introducir el concepto de ImpedanciaSemántica. ImpedanciaSemántica es la diferencia o distancia resultante al traducir un concepto encontrado en el &lt;strong&gt;MundoReal&lt;/strong&gt; al modelo de dominio. El dominio resultante puede ser código fuente o un diagrama UML.&lt;/p&gt;

&lt;p&gt;La &lt;a href=&quot;http://mechanical-sympathy.blogspot.com/2011/07/why-mechanical-sympathy.html&quot;&gt;SimpatíaMecánica&lt;/a&gt; de &lt;a href=&quot;http://channel9.msdn.com/posts/YOW-2012-Martin-Thompson-Mechanical-Sympathy-and-High-Performance-Coding&quot;&gt;Martin Thompson&lt;/a&gt; consiste aprovechar consientemente las condiciones particulares del hardware por las aplicaciones de software para obtener los mejores resultados en un atributo de calidad: consistencia, desempeño, disponibilidad, etc.&lt;/p&gt;

&lt;p&gt;Entendiendo los anteriores conceptos queda muy fácil definir la &lt;strong&gt;SimpatíaSemántica&lt;/strong&gt;: consiste en minimizar la ImpedanciaSemántica entre el mundo real y la aplicación de software buscando aprovechar el funcionamiento el mundo real para aumentar el valor generado por la aplicación de software resultante.&lt;/p&gt;

&lt;p&gt;La &lt;strong&gt;SimpatíaSemántica&lt;/strong&gt; consta de tres hitos a los cuales se llegan a traves de tres transformaciones o Funciones, responsabilidad del equipo desarrollador.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../imgs/semantic_sympathy.png&quot; width=&quot;526px&quot; height=&quot;372&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La anterior es una esquematización de la labor del equipo de desarrollo cuando inicia un proyecto de software. Por lo general el equipo parte de una problemática encontrada en el mundo real. Esta problemática la esboza en un modelo el cual representa una &lt;strong&gt;Abstracción&lt;/strong&gt; del mundo real. La &lt;strong&gt;Abstracción&lt;/strong&gt; es luego traducida en código fuente el cual al compilarse y desplegarse en el ambiente de producción resuelve la problemática identificada en el mundo real generando valor de negocio.&lt;/p&gt;

&lt;p&gt;Así, la labor del equipo puede dividirse en tres transformaciones:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Del mundo real a la abstracción del mundo real.&lt;/li&gt;
  &lt;li&gt;De la abstracción del mundo real al código fuente.&lt;/li&gt;
  &lt;li&gt;Del código fuente a la aplicación de software productiva.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;f--mundoreal--dominio&quot;&gt;F : MundoReal =&amp;gt; Dominio&lt;/h3&gt;

&lt;p&gt;La primera función se puede entender como una transformación del conocimiento y mecanismos encontrados en el &lt;strong&gt;MundoReal&lt;/strong&gt; al diseño de una &lt;strong&gt;Abstracción&lt;/strong&gt; del mismo en su semántica.&lt;/p&gt;

&lt;p&gt;Se habla en términos de una &lt;strong&gt;Abstracción&lt;/strong&gt; debido a que el equipo de desarrollo no modela todo el &lt;strong&gt;MundoReal&lt;/strong&gt;. Por ejemplo: por lo general y dependiendo de la problemática a resolver sacamos de nuestras abstracciones la gravedad o la fricción o cualquier otro fenómeno físico existente en el &lt;strong&gt;MundoReal&lt;/strong&gt;. Como equipo de desarrollo nos concentramos es en describir los mecanismos en términos de la semántica suficientes para caracterizar la problemática y solucionarla.&lt;/p&gt;

&lt;p&gt;El hecho de que esta &lt;strong&gt;Abstracción&lt;/strong&gt; haga uso de la misma semántica del &lt;strong&gt;MundoReal&lt;/strong&gt; garantiza el aumento de la &lt;strong&gt;SimpatíaSemántica&lt;/strong&gt; entre el dominio de la Función (el &lt;strong&gt;MundoReal&lt;/strong&gt;) y el rango de la Función (la &lt;strong&gt;Abstracción&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Esta simpatía es deseable y provechosa en la medida en la que la &lt;strong&gt;Abstracción&lt;/strong&gt; modela los mecanismos y relaciones entre definiciones encontradas en el &lt;strong&gt;MundoReal&lt;/strong&gt; permitiendo que un cambio en este sea fácilmente replicable en la &lt;strong&gt;Abstracción&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Esta facilidad redundará en la &lt;strong&gt;CapacidadDeEvolución&lt;/strong&gt; y &lt;strong&gt;CapacidadDeMantenimiento&lt;/strong&gt; que tendrá la aplicación de software. Así mismo redundará en la cantidad positiva de valor generado por la aplicación.&lt;/p&gt;

&lt;p&gt;En términos DDDesign la &lt;strong&gt;Abstracción&lt;/strong&gt; no es más que el &lt;strong&gt;LenguajeUbícuo&lt;/strong&gt;, el &lt;strong&gt;ModeloDeDominio&lt;/strong&gt; y el conocimiento de negocio adquirido por el equipo de desarrollo.&lt;/p&gt;

&lt;h3 id=&quot;f--dominio--cdigo&quot;&gt;F’ : Dominio =&amp;gt; Código&lt;/h3&gt;

&lt;p&gt;Dado que la &lt;strong&gt;Abstracción&lt;/strong&gt; se puede reducir al &lt;strong&gt;ModeloDeDominio&lt;/strong&gt;, el &lt;strong&gt;LenguajeUbícuo&lt;/strong&gt; y el conocimiento de negocio adquirido por el equipo de desarrollo, podemos hacer uso de los patrones tácticos de DDDesign para iniciar la construcción del &lt;strong&gt;CódigoFuente&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Es necesario destacar que en la medida en la que el equipo de desarrollo conozca de manera más profunda el &lt;strong&gt;MundoReal&lt;/strong&gt; y tenga más cerca al experto de negocio esta transformación tendrá mayor &lt;strong&gt;SimpatíaSemántica&lt;/strong&gt;. En casos en los que estas condiciones no se dan, por ejemplo, el Arquitecto PowerPoint o el Líder de Requerimientos, es inevitable que la &lt;strong&gt;SimpatíaSemántica&lt;/strong&gt; se vea impactada negativamente.&lt;/p&gt;

&lt;p&gt;Entre mayor sea la &lt;strong&gt;SimpatíaSemántica&lt;/strong&gt; entre la &lt;strong&gt;Abstracción&lt;/strong&gt; y el &lt;strong&gt;CódigoFuente&lt;/strong&gt;, por transitividad, será mayor la &lt;strong&gt;SimpatíaSemántica&lt;/strong&gt; entre el &lt;strong&gt;MundoReal&lt;/strong&gt; y el &lt;strong&gt;CódigoFuente&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Si se logra una alta Simpatía entre el &lt;strong&gt;MundoReal&lt;/strong&gt; y el &lt;strong&gt;CódigoFuente&lt;/strong&gt; llegaremos a aplicaciones de software enriquecidas por los conceptos y mecanismos encontrados en el &lt;strong&gt;MundoReal&lt;/strong&gt; a tal punto que el &lt;strong&gt;MundoReal&lt;/strong&gt; se convierte en fuente de inspiración para resolver problemas de consistencia transaccional, distribución de cargas o cualquier otro atributo de calidad.&lt;/p&gt;

&lt;p&gt;Esta transformación depende en gran medida de la calidad de código que se escriba. Así mismo dependerá de las habilidades en los distintos paradigmas de programación que tenga el equipo. Por ejemplo, el paradigma OO es un candidato intuitivo para hacer este tipo de transformación. No obstante si el equipo es diestro en el paradigma funcional podrá encontrar formas de modelar la &lt;strong&gt;Abstracción&lt;/strong&gt; en funciones que pueden llegar a modelar de manera más precisa (o con mayor &lt;strong&gt;SimpatíaSemántica&lt;/strong&gt;) un comportamiento de la &lt;strong&gt;Abstracción&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;f-cdigofuente--generacindevalor&quot;&gt;F’’: CódigoFuente =&amp;gt; GeneraciónDeValor&lt;/h3&gt;

&lt;p&gt;Si se siguió el proceso descrito en las secciones anteriores buscando en cada hito respetar y promover la &lt;strong&gt;SimpatíaSemántica&lt;/strong&gt; se puede llegar a aseverar que la aplicación de software es rica en comportamientos y semática del MundReal.&lt;/p&gt;

&lt;p&gt;También se puede afirmar que inclusive la UI de la aplicación se construyó en términos del &lt;strong&gt;MundoReal&lt;/strong&gt; resultando en una UI intuitiva.&lt;/p&gt;

&lt;p&gt;Si el usuario llega a solicitar una modificación a un funcionamiento podemos también pensar que esta modificación obedece a un cambio en el &lt;strong&gt;MundoReal&lt;/strong&gt; y, como construimos nuestra aplicación siendo semánticamente simpática, podemos afirmar que este cambio será sencillo, predecible y fácilmente replicable impactando positivamente el valor agregado generado por la aplicación de software en el &lt;strong&gt;MundoReal&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;El valor agregado entonces no se limitará a haber resuelto la problemática sino también a reducir el costo de propiedad, mantenimiento y evolución de la aplicación.&lt;/p&gt;

&lt;h3 id=&quot;conclusin&quot;&gt;Conclusión&lt;/h3&gt;

&lt;p&gt;Todo este discurso nace de la necesidad de explicar cuál es la función de un equipo de desarrollo. Si estan de acuerdo conmigo, este proceso requiere de un gran esfuerzo intelectual, de comunicación y disciplina; habilidades y competencias que no son comunes en la industria.&lt;/p&gt;

&lt;p&gt;Definí la &lt;strong&gt;SimpatíaSemántica&lt;/strong&gt; con el propósito de encapsular en una sola definición las decisiones técnicas orientadas por el &lt;strong&gt;MundoReal&lt;/strong&gt; y el proceso cognitivo mismo de un equipo de desarrollo cuando construye una aplicación de software porque, hacer software no es solo usar tecnologías. Hacer software no es solo comunicación a través de una metodología ágil y sus ceremonias. Hacer software no es solo hacer CRUD sobre datos.&lt;/p&gt;

&lt;p&gt;Hacer software es generar valor al &lt;strong&gt;MundoReal&lt;/strong&gt; y la &lt;strong&gt;SimpatíaSemántica&lt;/strong&gt; es un mecanismo para alcanzar y medir ese valor.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://b.yujikiriki.com/2013/02/23/pareto_arquitectura_y_scrum</id>
    <link type="text/html" rel="alternate" href="http://b.yujikiriki.com/2013/02/23/pareto_arquitectura_y_scrum.html"/>
    <title>Arquitectura, DDD y Scrum.</title>
    <updated>2013-02-23T00:00:00-05:00</updated>
    <author>
      <name>Yuji Kiriki</name>
      <uri>http://yujikiriki.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Después de haber experimentado el curso de certificación en Scrum developer (CSD) quedé con una duda: dónde meter los ejercicios de arquitectura de software para los proyectos de mis clientes.&lt;/p&gt;

&lt;p&gt;Pido que no me malinterpreten, considero que Scrum como metodología de construcción de software es madura, honesta, acertada y efectiva a la hora de construir software. En este momento me es difícil imaginar otra manera de ejecutar proyectos de software.&lt;/p&gt;

&lt;p&gt;Sin embargo, estoy acostumbrado a realizar ciclos completos de &lt;a href=&quot;http://www.sei.cmu.edu/architecture/tools/evaluate/atam.cfm&quot;&gt;Architecture Tradeoff Analysis Method&lt;/a&gt; (ATAM) o &lt;a href=&quot;http://www.sei.cmu.edu/library/abstracts/whitepapers/icse16.cfm&quot;&gt;Software Architecture Analysis Method&lt;/a&gt; (SAAM) combinándolos con &lt;a href=&quot;http://www.sei.cmu.edu/architecture/tools/define/add.cfm&quot;&gt;Attribute-Driven Design Method&lt;/a&gt; (ADD) para llegar a definiciones arquitectónicas adecuadas para los retos que tienen las empresas en sus aplicaciones estratégicas.&lt;/p&gt;

&lt;p&gt;Cuando pongo sobre la mesa Scrum y ADD la cosa se complica, más aún si, como algunos sabrán, soy fiel creyente de los buenos resultados de hacer DDD cuando tengo que enfrentarme a un dominio complejo.&lt;/p&gt;

&lt;p&gt;Afirmo que se complica porque, según aprendí, la forma adecuada de diseñar en las metodologías ágiles es vía TDD. Como desarrolladores tenemos que ir descubriendo el diseño de nuestra aplicación a través de la implementación de pruebas unitarias, siguiendo juiciosamente el ciclo &lt;em&gt;Red/Green/Refactor&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;diseo--arquitectura&quot;&gt;Diseño != Arquitectura&lt;/h3&gt;

&lt;p&gt;Para que mi lector entienda hacia dónde voy, es fundamental entender que  diseñar es distinto a arquitectar.&lt;/p&gt;

&lt;p&gt;Arquitectura de software es la colección de decisiones fundamentales sobre una solución de software que buscan cumplir o alcanzar los atributos de calidad esperados por los &lt;em&gt;stakeholders&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Diseño de software es el ejercicio de modelar una abstracción del mundo real en término de objetos y sus relaciones. Siendo estrictos, en esta entrada sólo me interesa el diseño de software orientado a objetos.&lt;/p&gt;

&lt;p&gt;Con estas definiciones podemos dejar a un lado la presunción de que a través de TDD se busca o pretende arquitectar.&lt;/p&gt;

&lt;h3 id=&quot;me-olvido-de-arquitectar&quot;&gt;¿Me olvido de arquitectar?&lt;/h3&gt;

&lt;p&gt;Obviamente no. Como decía el instructor del curso, Scrum sólo es un marco de trabajo para construir y entregar software. La etapa de arquitectura entonces, deberá ser previa a la ejecución misma del primer Sprint del proyecto que tenga como objetivo realizar el primer &lt;em&gt;Review&lt;/em&gt; del producto de software, sin caer, evidentemente, en un &lt;a href=&quot;http://en.wikipedia.org/wiki/Big_Design_Up_Front&quot;&gt;&lt;em&gt;Big Design Up Front&lt;/em&gt;&lt;/a&gt; (BDUF).&lt;/p&gt;

&lt;p&gt;Los ejercicios de ATAM, SAAM o ADD están orientados a arquitectar, así que no existe forma de estar haciendo BDUF, precisamente por la “D” de &lt;em&gt;Design&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;las-coincidencias-de-ddd-y-scrum&quot;&gt;Las coincidencias de DDD y Scrum&lt;/h3&gt;

&lt;p&gt;Como mencioné, soy fiel creyente de DDD por los positivos resultados que he obtenido al enfrentarme a dominios de negocio complejos. Como también dije, me encanta Scrum. Curiosamente he descubierto varios puntos de coincidencia entre ambas que presento y aclaro a continuación.&lt;/p&gt;

&lt;p&gt;Cuando un equipo tiene en sus manos un preciso &lt;em&gt;Lenguaje Ubicuo&lt;/em&gt; acompañado por diagramas de &lt;em&gt;Modelos de Dominio&lt;/em&gt; y diagramas de &lt;em&gt;Contextos Delimitados&lt;/em&gt;, se obtiene gran poder y capacidad de entender. No solo eso, el código resultado de un buen diseño con DDD representa exactamente el problema, logrando veracidad, exactitud y transparencia entre la abstracción del mundo real y el código fuente de la aplicación de software.&lt;/p&gt;

&lt;p&gt;DDD propone realizar &lt;em&gt;Diseño Estratégico&lt;/em&gt;, el cual habla de los &lt;em&gt;Contextos Delimitados&lt;/em&gt; y cómo lograr encontrarlos, definirlos y respetarlos buscando construir subdominios cohesivos fácilmente mantenibles.&lt;/p&gt;

&lt;p&gt;Todas las actividades que DDD propone parecieran entonces BDUF, pues estos artefactos se construyen previo a la implementación misma del producto de software. Lo curioso es que para llegar a buenos artefactos DDD, se requiere tener muy cerca a lo que en DDD se denomina, el &lt;em&gt;Experto de Negocio&lt;/em&gt;. Si lo pasamos al &lt;em&gt;Lenguaje Ubicuo&lt;/em&gt; de Scrum, las responsabilidades que tiene este experto de negocio de DDD no son más que un subconjunto de las responsabilidades del &lt;em&gt;Product Owner&lt;/em&gt; (P.O).&lt;/p&gt;

&lt;p&gt;Por ejemplo, para que un P.O pueda realizar una adecuada priorización del &lt;em&gt;Product Backlog&lt;/em&gt; y para poder saber qué historias de usuario son las de mayor valor para el negocio, éste debe conocer muy bien el dominio de negocio. Para DDD un &lt;em&gt;Experto de Negocio&lt;/em&gt; no es más que eso, la persona de la cual se realizará la &lt;em&gt;destilación&lt;/em&gt; de conocimiento para llegar a una buena definición del &lt;em&gt;Modelo de Dominio&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Con base en la anterior coincidencia y entendiendo el poder comunicativo del &lt;em&gt;Lenguaje Ubicuo&lt;/em&gt;, puedo aseverar que la mejor manera de escribir las historias de usuario es en términos del mismo, siendo este un artefacto meramente DDD.&lt;/p&gt;

&lt;p&gt;Adicionalmente, que todo nuestro equipo (incluyendo el P.O) conozca y entienda nuestro &lt;em&gt;Modelo de Dominio&lt;/em&gt; es sin lugar a dudas un habilitador y un claro &lt;em&gt;radiador de información&lt;/em&gt; para la metodología Scrum, el cual, en palabras de Evans, debe ir evolucionando conforme la aplicación va cambiando, algo que debe realizarse de manera muy iterativa.&lt;/p&gt;

&lt;p&gt;De esta manera afirmo que DDD no pretende que el &lt;em&gt;Modelo de Dominio&lt;/em&gt; se defina en una sola sentada de varias semanas. DDD pretende que nosotros como desarrolladores evolucionemos el &lt;em&gt;Modelo de Dominio&lt;/em&gt; y el &lt;em&gt;Lenguaje Ubicuo&lt;/em&gt; a medida que &lt;em&gt;destilamos&lt;/em&gt; conocimiento de nuestro P.O.&lt;/p&gt;

&lt;p&gt;Considero que no hay mejor momento para &lt;em&gt;destilar&lt;/em&gt; conocimiento de dominio que en la etapa de definición de las historias de usuario que definirán el &lt;em&gt;Product Backlog&lt;/em&gt; y, poco a poco, irlos perfeccionando cuando el equipo tenga la necesidad de hacerlo, finalmente el P.O / &lt;em&gt;Experto de negocio&lt;/em&gt; debe estar allí para ellos.&lt;/p&gt;

&lt;p&gt;Por otro lado, el resultado del &lt;em&gt;Diseño Estratégico&lt;/em&gt; no puede catalogarse como un artefacto de diseño sino de arquitectura pues su adecuada definición está orientada a facilitar y fomentar atributos de calidad tales como evolutividad, mantenibilidad y facilidad de integración.&lt;/p&gt;

&lt;h3 id=&quot;tdd-y-el-modelo-de-dominio&quot;&gt;TDD y el Modelo de Dominio&lt;/h3&gt;

&lt;p&gt;La capacidad de ir descubriendo el diseño de un componente a medida que se  construyen pruebas unitarias es una poderosa promesa de TDD. Sin embargo, considero que partiendo de un &lt;em&gt;Modelo de Dominio&lt;/em&gt; se logra un pareto de diseño muy interesante que explico a continuación.&lt;/p&gt;

&lt;p&gt;El &lt;em&gt;Modelo de Dominio&lt;/em&gt; representa el 20% de profundidad de un diseño detallado tradicional, pues este no contiene ni definición de métodos, contratos o atributos de las entidades. No obstante, ese 20% de profundidad es suficiente para influenciar el 80% de las decisiones de diseño que se pueden tomar como resultado de hacer TDD juiciosamente (por ejemplo, los patrones tácticos de DDD). Tengo que admitir que los anteriores porcentajes son sacados, literalmente de la manga, pero al usarlos como metáfora me permiten explicar mi punto.&lt;/p&gt;

&lt;p&gt;Con este acercamiento, podemos combinar lo mejor del mundo de DDD con lo mejor de TDD.&lt;/p&gt;

&lt;h3 id=&quot;conclusin&quot;&gt;Conclusión&lt;/h3&gt;

&lt;p&gt;Con esta entrada pretendía ubicar los ejercicios de arquitectura en un proyecto ejecutado con Scrum. Igualmente buscaba exponer los efectos multiplicadores de combinar DDD y Scrum a través de sus claras coincidencias. Espero haber logrado mi objetivo.&lt;/p&gt;

&lt;p&gt;¿Qué opinan?&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://b.yujikiriki.com/2012/04/24/no_bpms</id>
    <link type="text/html" rel="alternate" href="http://b.yujikiriki.com/2012/04/24/no_bpms.html"/>
    <title>No, su proyecto no necesita BPMS</title>
    <updated>2012-04-24T00:00:00-05:00</updated>
    <author>
      <name>Yuji Kiriki</name>
      <uri>http://yujikiriki.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Sí, tenía que empezar con un buen título, algo llamativo y tentador, algo que invitara a participar. Ojalá este tema genere polémica y de la buena, de esa que no solo se trata de trolliar y nada más, de esa que tanto nos hace falta para cultivar criterio.&lt;/p&gt;

&lt;p&gt;Durante las jornadas comerciales que realizo para conocer clientes, me he encontrado más de una vez tratando de explicarles por qué ellos sí deberían hacer BPM y por qué no deberían tener un BPMS. Esta entrada a la bitácora trata precisamente de eso, de esclarecer y dejar mis argumentos de porqué, después de decenas de procesos de negocio analizados y/o implementados en mi vida, considero que estos adefesios, mal llamados Sistemas BPM, son inútiles para cualquier proceso de negocio de cualquier organización.&lt;/p&gt;

&lt;h3 id=&quot;la-complejidad-de-negocio&quot;&gt;La complejidad de negocio&lt;/h3&gt;

&lt;p&gt;Para esta entrada la complejidad de negocio se traduce a la densidad de las relaciones que se establecen al combinar actores, objetivos de negocio, procedimientos, actividades humanas y comportamiento de negocio (que incluyen las reglas de negocio) en un sistema. Entre más relaciones o nodos existan, más complejo será el sistema.&lt;/p&gt;

&lt;p&gt;Me encanta ver los Demos de las herramientas BPMS que hacen los proveedores de tecnología: tres actividades humanas, un par de roles, escalamientos con base en unas reglas quemadas en alguna estructura de decisión y listo. “Y mire…” dice el Consultor BPM de alguno de esos proveedores “¡también le generamos las pantallas que necesita su aplicación!”, “¡No necesita DBA! ¡No necesita desarrolladores expertos!” “¡El analista de negocio es quien gobierna las reglas!”. Subestiman la complejidad del mundo real y de ahí, pocas veces, hay éxito o vuelta atrás.&lt;/p&gt;

&lt;h3 id=&quot;las-promesas-rotas&quot;&gt;Las promesas rotas&lt;/h3&gt;
&lt;p&gt;Lamentablemente el desarrollador no se tiene que enfrentar a esos procesos de mentiras. Él tiene que modelar procesos llenos de comportamiento de negocio, de imprecisiones y flujos excepcionales que casi son regla general.&lt;/p&gt;

&lt;p&gt;La primera decisión que toma el desarrollador es montar todo su proceso de negocio, hasta un nivel procedimental y empieza a generar pantallas. Poco a poco se va dando cuenta que a su editor de procesos cada vez le va costando más abrir ese proyecto y poco a poco la complejidad que está tratando de modelar se va volviendo inmanejable. Luego, después de semanas de estar descubriendo las funcionalidades de su editor de procesos se dispone a realizar su primer despliegue del proceso, con pantallas generadas y todo. Su computador de desarrollo se demora un rato desplegando, pero bueno, después de unos minutos la aplicación queda desplegada.&lt;/p&gt;

&lt;p&gt;El desarrollador, contento, se da cuenta que la cosa como que sí funciona y piensa inocentemente “menos mal que el ambiente de producción tiene 8 instancias en cluster con procesadores de última generación y memoria casi ilimitada”.&lt;/p&gt;

&lt;p&gt;Pasan las semanas, los analistas de negocio siguen y siguen solicitando modificaciones y flujos alternativos al proceso hasta que al fin llegan a una definición de proceso adecuada para  producción. Cabe aclarar que muchas de las “variaciones” y “validaciones” del proceso son decisiones que son tomadas por un motor de reglas de negocio y otras son accesos a procedimientos almacenados o a tablas de la base de datos. Obviamente, para poder acceder a estos “servicios” hay webservices SOAP pero pues, en algunos casos le toco meter lógica escrita en Java dentro de la ejecución del proceso. “Pero pues…” piensa el desarrollador “si la herramienta lo permite debe ser porque se puede y no está mal, ¿no?”.&lt;/p&gt;

&lt;p&gt;El desarrollador confiado va y despliega su super proceso (ya no apaga el computador de desarrollo porque el IDE se está demorando mucho en cargar el proyecto) en el ambiente de calidad que consiste en dos máquinas con el BPMS en cluster y después de unos 25 minutos el proceso despliega sin problemas. “Definitivamente los BPMS son lo máximo” piensa feliz el desarrollador. Va, revisa las pantallas generadas y están al pelo. Unas toco forzarlas a punta de machetazos en Javascript, pero ahí están, generaditas por el BPMS. El desarrollador no necesitó preguntarle a nadie por un modelo de datos, ni le toco ser experto en transacciones para poder sacar adelante un proyecto BPM. Mucho duro.&lt;/p&gt;

&lt;p&gt;Las pruebas inician en el ambiente de calidad y al principio la cosa anda bien. Algunas correcciones, algunas pantallas a las que toca hacerle un par de machetazos más, una que otra lógica adicional insertada en el modelo del proceso, uno que otro acceso desde algún lado bien creativo y listo, pasamos pruebas funcionales y el desarrollador es la meca técnica de los sistemas BPM. El único usuario que estaba haciendo pruebas aprueba el paso a producción de la aplicación BPM.&lt;/p&gt;

&lt;p&gt;En producción la cosa se ve un poco difícil. Esas 8 instancias tienen dificultad de desplegar ese super proceso. Afortunadamente el de infraestructura es un duro y a punta de comandos por debajo y asignando un heap de 32 gigas, la aplicación sube. Una revisión del dump de la JVM diagnostica que no se presentan mayores problemas. Al desarrollador lo nombran Arquitecto Líder de Desarrollo de Aplicaciones Orientadas a Procesos y por ahí una universidad le confiere el título de Maestro en Construcción de Software Orientado a Procesos.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../imgs/exito.png&quot; width=&quot;254px&quot; height=&quot;204&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La primera semana de operación, los de infraestructura se dan cuenta que las 32 gigas asignadas no son suficientes y que requieren asignarle al menos el doble para que la plataforma funcione. La segunda semana la base de datos empieza a generar bloqueos y contención produciendo fallas generalizadas y quejas por parte de los usuarios porque la aplicación “está lenta”. Infraestructura llega al límite de su presupuesto, la aplicación actualmente se come más de 128 gigas en memoria, la base de datos no da abasto, se reportan errores por sesiones duplicadas, datos duplicados, fallas en la consistencia, reportes que se demoraban 2 segundos actualmente toman días en terminarse. Entra el pánico. Hay caos. El vicepresidente llama al Arquitecto Líder de Desarrollo de Aplicaciones Orientadas a Procesos con Maestría y le pregunta “¿qué hacemos?”.&lt;/p&gt;

&lt;p&gt;El que era una vez desarrollador y se “ensuciaba las manos” escribiendo código le responde: “llamemos al proveedor porque yo no se qué hacer. Los errores hablan de bloqueos en bases de datos y yo nunca diseñé una base de datos para la aplicación. También me sale que las transacciones toman mucho tiempo y no se de que se trata todo eso de las transacciones si tampoco me tocó diseñar alguna…”.
Al llamar al proveedor, estos mandan un experto de Alemania o de Bélgica o de EEUU hasta Colombia (ahí ellos se sintieron importantes, obviamente) y la conclusión a la que llega es que “no usaron las mejores prácticas” y “la herramienta fue mal utilizada”. Ahí todos quedan fríos. Después de miles de dolares en licencias y entrenamiento, le dicen al Vice que la aplicación que construyeron es inviable y que ellos no le dan soporte debido a que quedó mal construida. ¿Culpa del Arquitecto? ¿Culpa del Vice? ¿Culpa del desarrollador? ¿La culpa es de la vaca?&lt;/p&gt;

&lt;h3 id=&quot;una-evaluacin-tcnica-conciensuda&quot;&gt;Una evaluación técnica conciensuda&lt;/h3&gt;
&lt;p&gt;La historia que les acabo de contar es de cualquier cliente, de todos los que han comprado un BPM y estoy seguro que ustedes, los lectores, conocerán más de un caso similar. No faltará el que me salte y diga que él sí tiene un proceso funcionando perfectamente, por eso quiero hacer una evaluación técnica de un BPMS desde un punto funcional y como estructura arquitectónica.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Como estructura arquitectónica, demasiada responsabilidad.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Si ustedes lo analizan por un segundo, lo que los proveedores de tecnología nos tratan de vender es una herramienta que es capaz de modelar procesos, ejecutar procesos, orquestar actividades humanas, gestionar el ciclo de vida de las tareas (reclamarlas, liberarlas, asignarlas, escalarlas, etc ), generar eventos para la generación de indicadores de gestión, generar pantallas, acceder a servicios web, procedimientos almacenados, tablas, modelar reglas en tablas de decisión, ejecutar lógica implementada en Java, C#, o lo que sea, generación de alarmas, generación de notificaciones vía correo electrónica, mandar a imprimir, mostrar en tableros de control los indicadores de manera automática, etc. Todas esas funcionalidades en una sola estructura arquitectónica. Eso a uno le huele a acoplamiento, y del más feo.&lt;/p&gt;

&lt;p&gt;Acoplamiento no solo por la exagerada cantidad de responsabilidades que tiene que asumir esa estructura para las aplicaciones que fueron desarrolladas o generadas dentro del BPMS sino que genera dependencia a las estructuras externas que requieren el uso del BPMS, tales como administración del ciclo de vida de un proceso o una tarea humana.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Funcionalidad: generar indicadores.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Esta es tal vez una de las mayores expectativas por parte de los usuarios o analistas de negocio. Ver como a medida que se va ejecutando el proceso de negocio se generan indicadores de gestión. Muchas veces he encontrado que haciendo un adecuado análisis y diseño del modelo del dominio vía DDD, uno descubre que realmente a lo que le quieren hacer seguimiento es al ciclo de vida de la solicitud o de los documentos que orbitan alrededor de la ejecución del proceso. Algunos lo llaman hoja de ruta del proceso, pero al final del día es eso: llevar registro de todo lo que pasa. 
Cuando llego a ese momento me pregunto ¿acaso los BPMS son la única forma de obtener ese tipo de información? ¿Es un modelo exclusivo? ¿Acaso no hay alternativas técnicas más adecuadas de generar eventos tal vez más ricos y útiles a través de otros mecanismos más desacoplados? ¿Cuántos Indicadores Clave de Desempeño son realmente útiles? ¿de 5 a 7 por proceso?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Funcionalidad: flexibilidad de negocio.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Eso sólo pasaría si el proceso de negocio es tan genérico y tan generalizado que sencillamente pierde su sentido semántico de negocio. Si ese es el caso ¿Entonces para qué se está usando un BPMS si es para modelar un proceso que no tiene nada de semántica de negocio? 
Al final del día, esa flexibilidad la estará soportando en estructuras que sí contengan esa semántica. ¿Para qué agregarle una capa más a su aplicación entonces? ¿Por los indicadores? ¿Por la orquestación de tareas humanas? Todo eso se puede hacer de maneras alternativas, mucho más ligeras y fáciles de mantener.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Funcionalidad: “no se necesita ser experto”, “los analistas de negocio serán dueños de sus reglas y procesos” y puede “generar código”.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Son las tres frases típicas de vendedor mediocre y mentiroso. Cuando las escuche ¡HUYA! ¿Por qué? Después de años de estar trabajando en este medio, me he dado cuenta de que esa es la expectativa de cualquier Gerente; que la tecnología reemplace por completo a esos seres costosos y que se demoran demasiado haciendo las cosas, los bien llamados desarrolladores. 
La tecnología está lejos, muy lejos de automatizar la construcción de software. Sí, podemos generar cositas, amañar DSLs o crear metamodelos muy cercanos al modelo de dominio de una empresa, pero de un problema en particular,  ¡no de cualquier problema!.&lt;/p&gt;

&lt;p&gt;Ahora, ¿se imaginan que un usuario de proceso, un analista de negocio, se ponga a jugar con las reglas de negocio de una aplicación sin hacer pruebas unitarias, sin pasar por etapas de calidad mínimas, sin poder saber realmente el impacto técnico que esa decisión tenga? “¡Ah!“, dirá el vendedor del proveedor de tecnología, “pero es que él puede simular…” Y ¿Si? ¿Es que acaso simular es suficiente? ¿Con eso el negocio queda tranquilo? ¿Podría una organización quedar tranquila sabiendo que por ejemplo las evaluaciones de riesgo de un crédito están siendo implementadas por una persona que no es experta en desarrollo de software?&lt;/p&gt;

&lt;h3 id=&quot;conclusin&quot;&gt;Conclusión&lt;/h3&gt;
&lt;p&gt;Al final del día y como siempre, lo que importa no es la tecnología. Lo que importa son las prácticas que se interiorizan. Un BPMS trae consigo más problemas que soluciones a su negocio. Nadie ha dicho y ni podría aseverar que para poder implementar BPM, desde el punto de vista de la ingeniería industrial, requiere un BPMS. BPM como mecanismo de administración de procesos es maravilloso y muy acertado, pero para implementarlo y soportarlo en tecnología no se requiere bajo ninguna circunstancia un sistema BPM. Bueno, a no ser que sus procesos sean tan sencillos como los que utilizan en las capacitaciones técnicas de las herramientas o en los Demos que muy amablemente nos hacen los proveedores de tecnología.&lt;/p&gt;

&lt;p&gt;Los BPMS fueron aciertos comerciales increíbles para los proveedores de tecnología. Vendieron la falsa idea de que una metodología tan seria, profunda y útil como BPM podía comprarse como se compra un Word o Excel. Y no señoras, señoritas y señores, eso no pasa en el mundo real.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://b.yujikiriki.com/2011/10/17/patron_estados_observados</id>
    <link type="text/html" rel="alternate" href="http://b.yujikiriki.com/2011/10/17/patron_estados_observados.html"/>
    <title>Patrón de estados observados</title>
    <updated>2011-10-17T00:00:00-05:00</updated>
    <author>
      <name>Yuji Kiriki</name>
      <uri>http://yujikiriki.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Durante los últimos años he participado en el diseño de aplicaciones que involucran procesos de negocio donde la estrella principal es una entidad en particular: una solicitud de préstamo, una solicitud de compra de un bien o un servicio, una queja o un reclamo, entre muchos otros.&lt;/p&gt;

&lt;p&gt;No les ha pasado que cuando se enfrentan a este tipo proyectos ¿el comportamiento de negocio de la entidad estrella del proceso queda llena de invocaciones a envíos de correos electrónicos y llamados a sistemas externos que &lt;strong&gt;nada&lt;/strong&gt; tienen que ver con las reglas de negocio que se requieren evaluar?&lt;/p&gt;

&lt;p&gt;Es típico. Esa clase que hace de todo porque es la entidad central del proceso de negocio. Esa clase que nos hace pasar horas hurgándola y depurándola porque hace demasiado. Esa clase que llega a ser intocable y no permite que la aplicación evolucione.&lt;/p&gt;

&lt;p&gt;Uno puede pensar que para evitar esto puede hacer delegados, fachadas, decoradores y demás, pero por más que ustedes aplican patrones y patrones, el código de la entidad estrella sigue plagada de código que &lt;strong&gt;no&lt;/strong&gt; tiene que ver con el comportamiento del negocio sino que tiene más que ver con las consecuencias de las reglas de negocio.&lt;/p&gt;

&lt;p&gt;En esta entrada presento un patrón que se me ocurrió para este tipo de proyectos evitando que el panorama se torne tan negro, permitiendoles asignar responsabilidades de manera rápida y segura, además de que les puede dar gratis procesamiento distribuido y gobierno de transacciones en sus aplicaciones empresariales.&lt;/p&gt;

&lt;p&gt;Para facilitar la comprensión de esta esta entrada, publiqué un proyecto de ejemplo de este patrón y lo pueden encontrar &lt;a href=&quot;https://github.com/yujikiriki/ObservedStatePattern&quot;&gt;acá&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;patrn-de-estados-observados&quot;&gt;Patrón de estados observados&lt;/h3&gt;

&lt;p&gt;Este es el resultado de la combinación de dos patrones de GoF: &lt;strong&gt;Observador&lt;/strong&gt; y &lt;strong&gt;Estado&lt;/strong&gt;. Le pusimos un nombre a modo de etiquetar la estrategia para resolver un tipo de problema recurrente en la construcción de aplicaciones empresariales que involucran procesos y tienen entidades estrella.&lt;/p&gt;

&lt;h4 id=&quot;patrn-observador&quot;&gt;Patrón observador&lt;/h4&gt;

&lt;p&gt;El siguiente es el diagrama de entidades que describe al patrón observador un poco matizado:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../imgs/PatronObservador.png&quot; width=&quot;550px&quot; height=&quot;91px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Es el típico patrón observador de GoF, solo que se hace énfasis en la estandarización del objeto de intercambio de mensajes que existe entre las entidades que observan y el sujeto observado. Además de estandarizar la comunicación entre el sujeto y los observadores, el mensaje nos permite agregarle versatilidad al patrón, como lo veremos más adelante.&lt;/p&gt;

&lt;p&gt;Como muchos sabrán, el patrón observador también es conocido como el patrón de &lt;em&gt;Publicación-Suscripción&lt;/em&gt; y nos será útil precisamente por eso, porque nos permitirá tener múltiples suscriptores a eventos generados por una sola entidad que publica eventos.&lt;/p&gt;

&lt;p&gt;El patrón observador permite abstraer el concepto de dependencia que existe entre una entidad con otra. Lo más dulce del asunto es que la entidad que publica no es consciente de la funcionalidad de sus suscriptores u observadores, logrando así un alto nivel de desacoplamiento entre el comportamiento del sujeto y los suscriptores.&lt;/p&gt;

&lt;h4 id=&quot;patrn-estado&quot;&gt;Patrón Estado&lt;/h4&gt;

&lt;p&gt;El siguiente es el diagrama del patrón Estado que utilizaremos para el de Estados Observados:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../imgs/PatronEstado.png&quot; width=&quot;430px&quot; height=&quot;68px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La gráfica describe una clase abstracta &lt;strong&gt;EntidadConEstados&lt;/strong&gt; la cual modela las entidades que por definición del dominio tienen estados. Por ejemplo, una queja de un sistema de atención de quejas puede tener que pasar a un estado prioritario al pasar de cierto número de días. Cada uno de estos estados de la entidad será representado por clases que cumplan el contrato definido por la interface &lt;strong&gt;IEstadoEntidad&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Además de permitirnos modelar de una manera bastante directa una entidad con múltiples estados, el patrón nos permite modelar y encapsular el comportamiento especifico en cada uno de los estados posibles de la &lt;strong&gt;EntidadConEstados&lt;/strong&gt; más el de cada una de las transiciones dadas entre estado y estado.&lt;/p&gt;

&lt;p&gt;De esta manera, cada estado implementa un algoritmo distinto permitiéndole a la &lt;strong&gt;EntidadConEstados&lt;/strong&gt; delegar la responsabilidad funcional de qué hacer en cada estado al objeto que modela el estado (es decir a las clases que cumplen con el contrato definido por &lt;strong&gt;IEstadoEntidad&lt;/strong&gt;).&lt;/p&gt;

&lt;h4 id=&quot;la-unin-hace-la-fuerza&quot;&gt;La unión hace la fuerza&lt;/h4&gt;

&lt;p&gt;Hasta acá nada nuevo, nada especial. Solo un pequeño repaso de dos patrones de comportamiento de GoF que al combinarlos podríamos obtener un resultado interesante:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../imgs/EstadosObservados01.png&quot; width=&quot;330px&quot; height=&quot;332px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En el diagrama anterior vemos las mismas clases que veíamos en las gráficas anteriores solo que juntas. En la sección derecha está el patrón Observador y en la de la izquierda vemos el patrón Estados. Lo único que en este momento une a los patrones es que &lt;strong&gt;EntidadConEstados&lt;/strong&gt; será una entidad observable.&lt;/p&gt;

&lt;p&gt;Como se mencionó anteriormente, lo interesante por observar de una &lt;strong&gt;EntidadConEstados&lt;/strong&gt; es precisamente sus estados y sus transiciones pues cada una representa un comportamiento fundamental del dominio.&lt;/p&gt;

&lt;p&gt;Esta es una buena pista ya que las clases &lt;strong&gt;IEstadoEntidad&lt;/strong&gt; contendrán el algoritmo requerido por el estado que representan y las consecuencias funcionales de que la &lt;strong&gt;EntidadConEstados&lt;/strong&gt; haya pasado a ese estado podrán implementarse en las entidades suscritas u observadoras de la &lt;strong&gt;EntidadConEstados&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Si se detienen a pensar un poco el párrafo anterior, se darán cuenta que estas implicaciones y consecuencias no deben ser implementadas dentro del contexto semántico de la &lt;strong&gt;EntidadConEstados&lt;/strong&gt;. A continuación explicamos porqué.&lt;/p&gt;

&lt;p&gt;Un cambio de estado de una &lt;strong&gt;EntidadConEstados&lt;/strong&gt; es un evento destacable del dominio del negocio. Al ser destacable ese cambio de estado tiene asociados múltiples requerimientos funcionales como enviar un correo electrónico a alguien, crear un registro en una bitácora, registrar el cambio de estado en un reporte, realizar un consumo de un servicio de sistema externo entre muchos otros. Estos requerimientos funcionales no hacen parte del dominio de la &lt;strong&gt;EntidadConEstados&lt;/strong&gt; como tal, pues queda un poco incomodo dejar este tipo de algoritmos inmersos en las reglas de negocio implementadas en ella o en un &lt;strong&gt;IEstadoEntidad&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Lo que sí es muy cómodo es crear observadores de estos eventos y en ellos delegar la responsabilidad de realizar esas funciones que no tienen que ver con el comportamiento del negocio, lo cual sí es responsabilidad de la &lt;strong&gt;EntidadConEstados&lt;/strong&gt;. Así, podríamos implementar el envío del correo electrónico en un observador especializado y que realice la notificación solo cuando a él le toque o le interese, evitando mezclar peras (comportamiento de negocio) con manzanas (requerimientos funcionales que no pertenecen al dominio de negocio).&lt;/p&gt;

&lt;p&gt;Es necesario anotar que un observador debe estar suscrito a todos los cambios de estado, pero no necesariamente le deben interesar todos.&lt;/p&gt;

&lt;p&gt;El siguiente diagrama presenta el diagrama del patrón Estados Observados un poco más completo para que soporte más funcionalidades:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../imgs/EstadosObservados02.png&quot; width=&quot;450px&quot; height=&quot;596px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En el diagrama anterior podemos identificar dos clases nuevas: &lt;strong&gt;EventoDeDominio&lt;/strong&gt; y &lt;strong&gt;SuscriptorDeCambiosDeEstado&lt;/strong&gt;. La primera implementa el contrato &lt;strong&gt;Mensaje&lt;/strong&gt;, lo que implica que esta será el móvil que permitirá la comunicación entre la &lt;strong&gt;EntidadConEstados&lt;/strong&gt; y sus observadores.&lt;/p&gt;

&lt;h4 id=&quot;un-evento-del-dominio&quot;&gt;Un evento del dominio&lt;/h4&gt;

&lt;p&gt;Una instancia de la clase &lt;strong&gt;EventoDeDominio&lt;/strong&gt; contiene información útil para cualquier aplicación como la hora de su ocurrencia, su hora de notificación, origen, etc. La clase captura algo ocurrido (en tiempo pasado) en la &lt;strong&gt;EntidadConEstados&lt;/strong&gt; y deberá contener todo lo que requieran los suscriptores.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../imgs/EventoDeDominio.png&quot; width=&quot;216px&quot; height=&quot;123px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para que nuestro patrón funcione es necesario poder identificar fácilmente de qué evento se trata y así determinar si el evento le interesa o no comparándolo contra una lista de eventos identificados como interesantes para ellos. Para esto modelamos el atributo “&lt;em&gt;tipo&lt;/em&gt;” que pertenece a un conjunto finito de elementos.&lt;/p&gt;

&lt;p&gt;También es necesario tener todos los datos de negocio relevantes del evento para que los posibles suscriptores sean lo más autónomos posible y sus algoritmos puedan trabajar solo con los datos recibidos. Para transportar esta información dejamos un atributo “&lt;em&gt;data&lt;/em&gt;”.&lt;/p&gt;

&lt;h4 id=&quot;un-suscriptor-de-cambios-de-estado&quot;&gt;Un suscriptor de cambios de estado&lt;/h4&gt;

&lt;p&gt;Como su nombre lo indica, la clase &lt;strong&gt;SuscriptorDeCambiosDeEstado&lt;/strong&gt; está suscrita a todos los cambios de estado que la &lt;strong&gt;EntidadConEstados&lt;/strong&gt; sufra debido a las reglas de negocio que la gobiernan y la manipulación que los usuarios finales de la aplicación realicen sobre ella a través de servicios o la capa de presentación.&lt;/p&gt;

&lt;p&gt;Un &lt;strong&gt;SuscriptorDeCambiosDeEstado&lt;/strong&gt; solo está interesado en algunos cambios de estado y para ello cuenta con una lista de eventos interesantes para él. Cada vez que le llegue un &lt;strong&gt;EventoDeDominio&lt;/strong&gt; interesante el tendrá el algoritmo adecuado que trabaje sobre los datos recibidos del evento.&lt;/p&gt;

&lt;p&gt;Si mapeamos este patrón a una aplicación distribuida, podemos hacer que un &lt;strong&gt;SuscriptorDeCambiosDeEstado&lt;/strong&gt; no comparta necesariamente el mismo espacio de memoria que la &lt;strong&gt;EntidadConEstados&lt;/strong&gt; pues el &lt;strong&gt;Mensaje&lt;/strong&gt; puede propagarse a través de algún protocolo (HTTP por ejemplo) o a través de una cola a otro espacio de memoria de otra máquina, permitiéndonos tener procesamiento distribuido de mensajes gratis.&lt;/p&gt;

&lt;h3 id=&quot;ejemplo&quot;&gt;Ejemplo&lt;/h3&gt;

&lt;p&gt;Una vez se ha entendido el mecanismo básico de comunicación entre las clases podemos entrar a ver el patrón en acción a través de un ejemplo.&lt;/p&gt;

&lt;p&gt;Nuestro ejemplo está inspirado en la implementación de una aplicación BPM que hoy en día se encuentra en producción, en la cual se utilizó el patrón de Estados Observados con bastante éxito.&lt;/p&gt;

&lt;p&gt;Vamos a tomar como ejemplo el proceso de quejas de una empresa de telefonía móvil en una versión muy simplificada:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../imgs/QuejaProceso.png&quot; width=&quot;367px&quot; height=&quot;577px&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;descripcin-del-proceso&quot;&gt;Descripción del proceso&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;El proceso lo inicia el envío de un formulario de queja diligenciado a través del portal Web de la compañía.&lt;/li&gt;
  &lt;li&gt;La queja es clasificada para que se le dé una correcta gestión según el tipo queja. Una queja puede ser clasificada de 1 a 3.&lt;/li&gt;
  &lt;li&gt;Según la clasificación de la queja, esta es asignada a un empleado de la empresa para que le dé una rápida gestión.&lt;/li&gt;
  &lt;li&gt;Una vez se finaliza la gestión de la queja, el usuario es notificado de la respuesta de la compañía.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como es usual, hay unos detalles que mariposean alrededor del proceso de negocio:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Si la queja es clasificada de nivel &lt;em&gt;3&lt;/em&gt; el sistema deberá notificar a la &lt;strong&gt;Unidad de Mercadeo&lt;/strong&gt; para que este envíe un regalo al usuario.&lt;/li&gt;
  &lt;li&gt;Si han pasado más de &lt;strong&gt;5 días&lt;/strong&gt; después de que el usuario registró la queja y esta no ha sido resuelta, la queja debe aumentar al máximo nivel de prioridad.&lt;/li&gt;
  &lt;li&gt;Una queja puede tener prioridad &lt;strong&gt;Alpha&lt;/strong&gt; u &lt;strong&gt;Omega&lt;/strong&gt;. Si es &lt;strong&gt;Alpha&lt;/strong&gt;, tiene la máxima prioridad y esta deberá ir en el &lt;strong&gt;reporte semanal de quejas&lt;/strong&gt; de la compañía. Una queja adquiere prioridad &lt;strong&gt;Alpha&lt;/strong&gt; si han pasado más de &lt;strong&gt;5&lt;/strong&gt; días de haberse recibido.&lt;/li&gt;
  &lt;li&gt;Se espera poder tener información en tiempo cercano al real del estado de cualquier queja y cómo ha sido su gestión para posibles auditorías por parte de la Superintendencia de Servicios Públicos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;METER EJEMPLO DE CONSUMO DE UN SERVICIO ASINCRONO&lt;/p&gt;

&lt;h4 id=&quot;la-propuesta-de-solucin-usando-el-patrn&quot;&gt;La propuesta de solución usando el patrón&lt;/h4&gt;

&lt;p&gt;&lt;img style=&quot;float:left&quot; src=&quot;../../../imgs/marrano.png&quot; width=&quot;150px&quot; height=&quot;125px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bien podría uno acribillar el BPEL de &lt;em&gt;&amp;lt;choices&amp;gt;&lt;/em&gt; e &lt;em&gt;&amp;lt;invoke&amp;gt;&lt;/em&gt; y modelar absolutamente todo en el proceso sin separar responsabilidades ni detenerse a modelar el dominio con actitud de &lt;em&gt;“Ahhhhhrrrrrggghhhh eso de todas maneras no lo voy a mantener yo, marranos…“&lt;/em&gt;; o bien podría usar el &lt;strong&gt;patrón de estados observados&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A continuación se presenta el diagrama que contiene el modelo de la entidad de negocio Queja como una &lt;strong&gt;EntidadConEstados&lt;/strong&gt; y sus &lt;strong&gt;SuscriptorDeCambiosDeEstado&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;margin-left: auto; margin-right: auto;&quot; src=&quot;../../../imgs/ejemplo.png&quot; width=&quot;550px&quot; height=&quot;342px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En la gráfica se presentan tres &lt;strong&gt;SuscriptorDeCambiosDeEstado&lt;/strong&gt; para la &lt;strong&gt;EntidadConEstados&lt;/strong&gt; &lt;em&gt;Queja&lt;/em&gt;, a saber: &lt;em&gt;Notificación&lt;/em&gt;, &lt;em&gt;ReporteAuditoría&lt;/em&gt; y &lt;em&gt;QuejaPrioridadAlpha&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Como se explicó, los &lt;strong&gt;SuscriptorDeCambiosDeEstado&lt;/strong&gt; están atentos a todos los &lt;strong&gt;EventoDeDominio&lt;/strong&gt; que emite la &lt;strong&gt;EntidadConEstados&lt;/strong&gt;. Al suscriptor &lt;em&gt;Notificación&lt;/em&gt; solo le interesan aquellos que impliquen el envío de correos electrónicos, tal como el requerimiento de enviar notificación a la &lt;strong&gt;Unidad de Mercadeo&lt;/strong&gt; para que le envíe un regalo al usuario cuando la queja adquiere clasificación 3.&lt;/p&gt;

&lt;p&gt;Cuando &lt;em&gt;Queja&lt;/em&gt; cambie a prioridad &lt;strong&gt;Alpha&lt;/strong&gt; debido a que se cumple la regla de negocio, el suscriptor &lt;em&gt;QuejaPrioridadAlpha&lt;/em&gt; tendrá la responsabilidad de ingresar la información de la &lt;em&gt;Queja&lt;/em&gt; al reporte semanal de quejas.&lt;/p&gt;

&lt;p&gt;El suscriptor &lt;em&gt;ReporteAuditoría&lt;/em&gt; estará escuchando todos los cambios de la entidad &lt;em&gt;Queja&lt;/em&gt;: el usuario que hizo el cambio, la hora en la que la hizo, la IP desde dónde realizó la modificación sobre la queja y qué modificación realizó. Si uno realiza una consulta por el ID de la queja sobre este reporte tendrá toda la información transaccional de la queja, información que como imaginarán es muy poderosa al tratar de capturar un error de la aplicación o la resolución particular de una queja.&lt;/p&gt;

&lt;p&gt;Los anteriores son solo tres ejemplos de simplificación del desarrollo de este tipo de requerimientos gracias al patrón utilizado. La simplificación se evidencia principalmente por presentar una solución más fácil de mantener y de evolucionar.&lt;/p&gt;

&lt;p&gt;Cualquier requerimiento nuevo consecuencia de una evaluación de reglas de negocio puede ser implementado rápidamente en un nuevo &lt;strong&gt;SuscriptorDeCambiosDeEstado&lt;/strong&gt;. O por ejemplo, si se necesita agregar una nueva notificación por correo electrónico, lo único que se debe hacer es meter un nuevo evento interesante en la lista de eventos interesantes de &lt;em&gt;Notificación&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ahora, pueden también imaginarse que cada uno de estos &lt;strong&gt;SuscriptorDeCambiosDeEstado&lt;/strong&gt; se encuentra desplegado en distintos servidores en varias particiones de red. La Queja cuando emite un evento ya no lo hace a través de memoria compartida sino que publica el evento como un mensaje a una cola JMS. Cada uno de los &lt;strong&gt;SuscriptorDeCambiosDeEstado&lt;/strong&gt; es un MDB que está suscrito a esa cola. Al hacer ese sencillo cambio, ya distribuyeron su aplicación y aumentaron la disponibilidad de su aplicación pues la transacción que gobierna el cambio de estado de la Queja ya no gobierna las transacciones consecuentes de este cambio.&lt;/p&gt;

&lt;p&gt;Un &lt;strong&gt;SuscriptorDeCambiosDeEstado&lt;/strong&gt; puede también tener la lógica requerida para afectar un sistema externo como un CRM, un ERP o un sistema de gestión documental. De esta manera realiza integración de sus aplicaciones desde la definición misma de la entidad estrella, logrando crear el vínculo entre el dominio del negocio y sus necesidades de integración.&lt;/p&gt;

&lt;h3 id=&quot;conclusiones&quot;&gt;Conclusiones&lt;/h3&gt;

&lt;p&gt;Una vez se tienen claros los requerimientos funcionales, el mayor reto al construir una aplicación empresarial crítica es lograr modelar el comportamiento del dominio del negocio en algoritmos y estructuras. El patrón que les acabo de explicar logra vincular de manera bastante práctica el comportamiento del dominio y las consecuencias esperadas de este comportamiento.&lt;/p&gt;

&lt;p&gt;Este patrón permite separar de manera clara las reglas de negocio los requerimientos funcionales que no hacen parte del comportamiento del negocio. De hecho, al utilizarlo, se refuerza la noción de desacoplamiento dentro comportamiento de negocio mismo, permitiendo que su mantenimiento o su evolución se pueda realizar pensando en dos vistas independientes: comportamiento y consecuencia de comportamiento.&lt;/p&gt;

&lt;p&gt;El patrón tiene una posibilidad muy poderosa: los observadores no necesariamente tienen que estar en el mismo espacio de memoria que la &lt;strong&gt;EntidadConEstados&lt;/strong&gt;. Supongan que en vez de que el &lt;strong&gt;SuscriptorDeCambiosDeEstado&lt;/strong&gt; tenga el algoritmo que mastica los datos, este envíe estos datos vía una cola a otro sistema para que haga con ellos lo que quiera. De esta manera el patrón nos regala procesamiento asíncrono de peticiones, permitiendo así soportar transacciones de larga duración de manera decente e inteligente con mucho gobierno.&lt;/p&gt;

&lt;p&gt;Siendo un poco extremos, podríamos hacer que todos los suscriptores de los eventos se encuentren en distintos espacios de memoria (bien sea en otros servidores virtualizados u otras máquinas virtuales) logrando que todas las consecuencias de un cambio de estado sean procesadas de manera distribuida. Esto es alta disponibilidad y alta capacidad de escalamiento gratis.&lt;/p&gt;

&lt;h3 id=&quot;restricciones-del-proyecto-ejemplo&quot;&gt;Restricciones del proyecto ejemplo&lt;/h3&gt;

&lt;p&gt;Debido a que este patrón se me ocurrió para el proyecto de un cliente que tiene su base de código en Java, nuestra implementación fue realizada en ese lenguaje. Sería muy interesante poder tener tiempo de hacer una implementación en un lenguaje como Scala, particularmente por el hecho de estar utilizando el patrón Observador.&lt;/p&gt;

&lt;p&gt;También sería interesante hacer una implementación con la librería Guava de Google la cual ofrece una nueva clase &lt;a href=&quot;http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/eventbus/EventBus.html&quot;&gt;EventBus&lt;/a&gt; la cual permite suscribirse como escucha (&lt;em&gt;listener&lt;/em&gt; en inglés) de eventos y enviar eventos.&lt;/p&gt;

&lt;p&gt;Posiblemente un modelo con programación reactiva sea más adecuado para la implementación de los observadores. Para más información de cómo sería el modelo con programación reactiva la pueden encontrar &lt;a href=&quot;http://lamp.epfl.ch/~imaier/pub/DeprecatingObserversTR2010.pdf&quot;&gt;acá&lt;/a&gt;.&lt;/p&gt;

</content>
  </entry>
  
  <entry>
    <id>http://b.yujikiriki.com/2011/07/22/soa_no_es_esb</id>
    <link type="text/html" rel="alternate" href="http://b.yujikiriki.com/2011/07/22/soa_no_es_esb.html"/>
    <title>SOA != ESB</title>
    <updated>2011-07-22T00:00:00-05:00</updated>
    <author>
      <name>Yuji Kiriki</name>
      <uri>http://yujikiriki.com/</uri>
    </author>
    <content type="html">&lt;p&gt;¿Qué opinan?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Un bus de servicios empresariales es la columna vertebral de una arquitectura SOA, ya que es la aplicación encargada de administrar los servicios disponibles a través de las diferentes aplicaciones que hacen parte del ecosistema de la…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cuando leí esta perla revisando esta &lt;a href=&quot;https://www.contratos.gov.co/archivospuc1/2011/DA/103002002/11-15-461398/DA_PROCESO_11-15-461398_103002002_2372832.pdf&quot;&gt;licitación&lt;/a&gt; no sabía si llorar, golpearme, reírme o hacerme el que nunca la había leído. ¿Columna vertical de qué? ¿Que administra qué? ¿Ecosistema de qué? Puro cuento de “Consultor de Preventa”.&lt;/p&gt;

&lt;p&gt;Lo que sí sabía era que tenía que escribir para desahogar esta sensación de impotencia y que mejor lugar que la bitácora.&lt;/p&gt;

&lt;h3 id=&quot;soa-y-las-cajas-negras&quot;&gt;SOA y las cajas negras&lt;/h3&gt;

&lt;p&gt;No hay un tema más trillado que SOA. Lo curioso es que en Colombia seguimos tratando de meterle estupideces a ese estilo arquitectónico tan simple. “¡Se le tiene, se le tiene! Que el ESB, que el UDDI, que el BPM, que el gobierno de servicios!”. Le metemos cuanta caja negra el “Consultor de Preventa” nos meta por los ojos a punta de tiquetes a Las Vegas, EEUU.&lt;/p&gt;

&lt;p&gt;&lt;img style=&quot;float:left&quot; src=&quot;../../../imgs/combo.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;No estoy en contra de las cajas negras. Solo quiero aclarar que si usted quiere orientar sus aplicaciones a servicios, lo que menos necesita son cajas negras. No necesita el triplecombo &lt;em&gt;BPM-ESB-UDDI&lt;/em&gt; que si lo pide agrandado le enciman un BAM. Lo que usted necesita es respetar los principios sobre los que se fundamenta este estilo. Luego, con el tiempo y si así se evidencia, usted podrá ir adquiriendo las cajas negras que requiera. Todas menos el ESB y su hermano siamés de cráneo el UDDI.&lt;/p&gt;

&lt;h3 id=&quot;por-qu&quot;&gt;¿Por qué?&lt;/h3&gt;

&lt;p&gt;Hace unos años, fui de los desocupados que me leí el libro &lt;a href=&quot;http://goo.gl/tIJTG&quot;&gt;“Enterprise Service Bus: Theory in Practice”&lt;/a&gt; de David Chappell. Cuando lo terminé no podía imaginar una aplicación orientada a servicios sin un ESB. A cualquier problema de integración, ¡pues qué más apropiado que un ESB! Podía tener un ESB perimetral para integraciones con sistemas externos, un ESB interno para la integración entre aplicaciones legadas y nuevas, otro ESB federado para las sucursales de la empresa, ¡Dios, eran épocas gloriosas! ¡Todos podemos hacer SOA! ¡Y tal como lo dijo el Consultor de Preventa no necesitamos DBA!&lt;/p&gt;

&lt;p&gt;Luego la industria y las empresas que lo habían adoptado vieron cómo, poco a poco, estas versátiles estructuras iban creciendo, engordándose y volviéndose cada día más pesadas, más densas, más grasosas. Poco a poco empezamos a tenerle asco a meterle la mano a esas mediaciones inmantenibles de tres kilómetros llenas de invocaciones a servicios SOAP, de reglas de negocio y validaciones. Vimos cómo empezamos a tener problemas en determinar que debía ir en una mediación del ESB y qué en la capa de lógica de negocio. Y del asco pasamos al miedo y la paranoia. Ahí fue cuando nos estrellamos, SOA empezó a desinflarse, lo mataron mil veces y quedamos enterrados en el valle de las desilusiones.&lt;/p&gt;

&lt;p&gt;Afortunadamente como con todo (próximamente también con cloud computing), después de la tormenta viene la calma. Las expectativas que tenían las empresas sobre SOA se ajustan a la realidad y nuestro medio se empezó a cuestionar ¿qué es realmente SOA? ¿Es SOAP web services? ¿Es ESBs y UDDIs?&lt;/p&gt;

&lt;p&gt;Al respondernos nos dimos cuenta que el patrón de integración ESB escondía todas las porquerías de la divergencia en la semántica de los datos de la empresa. Nos dimos cuenta que no podíamos continuar escondiendo las falencias de gobierno de servicios en un UDDI. Nos dimos cuenta que SOA no era lo que nos vendieron. Nos dimos cuenta que para hacer servicios no necesitábamos más que disciplina y sentido común, no una caja negra de pandora que cuando la abriéramos dejaríamos salir todas las vergüenzas que producen las malas decisiones.&lt;/p&gt;

&lt;h3 id=&quot;y-entonces-qu&quot;&gt;¿Y entonces qué?&lt;/h3&gt;
&lt;p&gt;Una arquitectura orientada a servicios se trata de eso: servicios. No cajas negras. SOA se fundamenta en la correcta definición y exposición de servicios que promueven el encapsulamiento de capacidades de negocio y la reutilización (y por derecha la interoperabilidad). No más no menos. El ESB se definió para integrar aplicaciones con tecnologías o datos disimiles y como ya expliqué es solo un patrón entre decenas de patrones más que pueden utilizarse para realizar esa misma tarea. Si leen entre líneas, les estoy afirmando &lt;em&gt;en su carita&lt;/em&gt; que SOA nunca habló de integración. Jamás. Y mucho menos que un patrón de integración fuera su columna vertebral.&lt;/p&gt;

&lt;h3 id=&quot;nuestro-problema-era-integracin&quot;&gt;Nuestro problema era integración&lt;/h3&gt;

&lt;p&gt;¡Exactamente! No sé porqué le echaron la culpa a SOA de los proyectos fracasados si los problemas que buscaban resolver con el estilo eran de integración. Y por eso es que hay “Firmas De Consultoría”, “Expertas en SOA”, que construyen el tipo de licitaciones mediocres, irresponsables y risibles que inspiraron esta entrada a la bitácora.&lt;/p&gt;

&lt;p&gt;Afortunadamente para el problema de la integración de aplicaciones hay muchísimas alternativas pues el problema no es nuevo. De hecho Hohpe y Woolf escribieron hace más de 8 años un &lt;a href=&quot;http://goo.gl/ABfJ3&quot;&gt;libro&lt;/a&gt; que solo habla de eso, de cómo integrar aplicaciones.&lt;/p&gt;

&lt;p&gt;En cualquier caso en la siguiente sección les dejo luces de cómo pueden pasar de pensar “SOA sobre ESB como columna vertebral” (jajajaja no puedo evitar reírme mucho cada vez que leo eso) y las maneras &lt;em&gt;enterprisey&lt;/em&gt; de hacer integración a nivel organizacional.&lt;/p&gt;

&lt;h3 id=&quot;alternativas-para-el-esb&quot;&gt;Alternativas para el ESB&lt;/h3&gt;

&lt;p&gt;En casi todos los escenarios para poder exponer servicios se necesita integrar servicios de otras aplicaciones o de aplicaciones de otras empresas. El ESB se creyó adecuado pues, según los vendedores de tecnología podían cumplir 4 responsabilidades: enrutamiento de mensajes, traducción de mensajes, transformación de protocolos y garantía en la calidad del servicio (a veces interpretada como la garantía de las transacciones distribuidas).&lt;/p&gt;

&lt;p&gt;Por esta razón les presento tres alternativas evaluadas desde esos tres puntos de vista.&lt;/p&gt;

&lt;h4 id=&quot;http-proxy&quot;&gt;HTTP Proxy&lt;/h4&gt;
&lt;p&gt;HTTP es una tecnología para sistemas basados en red muy exitosa y la mayor evidencia de ello es Internet. Un proxy HTTP es un mecanismo tan sencillo que hasta los profesores de mi universidad entienden qué es y cómo funciona.&lt;/p&gt;

&lt;p&gt;En el caso de esta alternativa, la única responsabilidad que actualmente tiene un ESB y que cubre el proxy es el enrutamiento, asumiendo que se van a estandarizar toda comunicación de aplicaciones sobre HTTP. La demás responsabilidades del ESB (traducción, transformación y QoS) se delegan en los puntos de integración.&lt;/p&gt;

&lt;p&gt;Cada punto de integración será responsable de asumir toda la complejidad de entender y realizar peticiones sobre HTTP, bien sea utilizando servicios web SOAP, servicios web REST o RPC-POX o tramas o lo que quieran.&lt;/p&gt;

&lt;p&gt;Esta opción es la más radical y ligera, pero es muy exitosa en organizaciones pequeñas y medianas y con pocas o ninguna aplicación legada. Reemplaza de golpe una responsabilidad del ESB y se olvida de tener un UDDI.&lt;/p&gt;

&lt;p&gt;Un ejemplo de esta alternativa es utilizar el proxy HTTP Squid que es viejito pero muy sabroso.&lt;/p&gt;

&lt;h4 id=&quot;simple-message-bus&quot;&gt;Simple Message Bus&lt;/h4&gt;
&lt;p&gt;Esta es la opción más “robusta” empresarialmente hablando, pues se usa un Message-Oriented Middleware (MoM por sus siglas en inglés) con una capa envolvente que simplifica el uso de colas, tópicos y listeners de mensajes. Lo bonito de esta alternativa es que es posible garantizar entrega de mensajes entre aplicaciones y se puede realizar enrutamiento. Las demás responsabilidades (transformación y traducción de mensajes) se delegan a los nodos a integrar.&lt;/p&gt;

&lt;p&gt;Tanto esta alternativa como la inmediatamente anterior dependen de la correcta definición de un lenguaje/vocabulario canónico que permita, a nivel del bus de mensajes, manejar conceptos únicos, forzando así que los nodos que se integran cumplan con este. De hecho tener un lenguaje/vocabulario canónico es la mejor práctica de integración posible; entendiendo que es muy difícil de lograr.&lt;/p&gt;

&lt;p&gt;Esta alternativa debe ir acompañada de un framework que abstraiga los detalles del manejo de colas y tópicos del MoM y que facilite la implementación de los patrones de Hohpe como Apache Camel. Combinar ambas tecnologías permiten tener una solución muy ligera, de rápido desarrollo y que fomenta la estandarización en la comunicación entre las aplicaciones.&lt;/p&gt;

&lt;p&gt;Un ejemplo de este enfoque es NServiceBus. Vale la pena leer qué hace y como lo hace. En Java lo mejor es utilizar un MoM como HornetQ que implementa NIO a través de Netty y de nuevo Apache Camel.&lt;/p&gt;

&lt;p&gt;Se puede soñar un poco con esta alternativa y se puede pensar en estandarizar el protocolo a través del cual se envían y consumen mensajes logrando estandarizar todos los niveles de la integración. El protocolo ideal sería HTTP.&lt;/p&gt;

&lt;h4 id=&quot;api-rest&quot;&gt;API REST&lt;/h4&gt;

&lt;p&gt;Es difícil separar esta opción de las anteriores. De hecho hace parte como de otra categoría o podría ser consecuencia de las dos anteriores. De todas maneras la propongo como la mejor opción para reemplazar un ESB en su totalidad.&lt;/p&gt;

&lt;p&gt;La idea es crear un API de servicios RESTful por aplicación empresarial. Luego lo único que toca hacer es un utilizar los API de servicios desde una u otra aplicación.&lt;/p&gt;

&lt;p&gt;Si lo piensan un poco se darán cuenta que las dos alternativas anteriores podrían ser los cómo de esta alternativa. De todas maneras lo dejo como una alternativa más.&lt;/p&gt;

&lt;h3 id=&quot;conclusin&quot;&gt;Conclusión&lt;/h3&gt;

&lt;p&gt;Las empresas que venden tecnologías empaquetadas abusan de las buenas ideas. Las violentan, mienten y les ponen palabras en la boca y eso solo le ha traído problemas a la industria y a los clientes. Y lo más triste es que lo han hecho toda su vida.&lt;/p&gt;

&lt;p&gt;Cada vez que sale una nueva idea estos señores las acaban: ha pasado con SOA, ha pasado con la bases de datos orientadas a objetos, ha pasado con Web 2.0, ha pasado con BPM, ha pasado con los BAM, ha pasado con los portales y está pasando con computación en nube en todas sus presentaciones. Por favor, no se dejen engañar ¡usen su sentido común! Eso es lo único que los protegerá siempre.&lt;/p&gt;

&lt;p&gt;Por otro lado duele el país al ver que las licitaciones del gobierno las construyen empresas irresponsables y Consultores que creen que al usar palabras sofisticadas, pomposas y rebuscadas pueden engañarnos a todos. Puede que a los honorables funcionarios públicos sí, pero aún somos muchos los que estamos en la disidencia luchando por la honestidad.&lt;/p&gt;

&lt;p&gt;Y finalmente, todo bien, no vuelvan a decir que hacer SOA es tener un ESB.&lt;/p&gt;

</content>
  </entry>
  
 
</feed>
